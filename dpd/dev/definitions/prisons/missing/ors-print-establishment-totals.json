{
  "id": "oked5PoADqbaNlUAlAGEcEPm5L8",
  "name": "ORS Print Establishment Totals",
  "description": "This report details the current roll for a chosen establishment and retrospectively calculates the morning unlock figure based on the receptions and discharges for the day so far.<br/>ACC0006 - v00.01.04 Last Modified: 06/02/2009                    ",
  "metadata": {
    "version": "1.0.0",
    "tags": [
      "ACC0006 v00.01.04 LSRIT022"
    ]
  },
  "datasource": [
    {
      "id": "nomis",
      "name": "NOMIS",
      "database": "DIGITAL_PRISON_REPORTING",
      "catalog": "nomis"
    }
  ],
  "dataset": [
    {
      "id": "3376286/DPd",
      "name": "Roll Check",
      "description": "Sentence",
      "datasource": "nomis",
      "query": "dataset_base_ AS (SELECT DISTINCT SUM(CASE AT_OFFENDER_BOOKING.IN_OUT_STATUS WHEN 'OUT' THEN CASE SUBSTR(AT_OFFENDER_BOOKING.STATUS_REASON, 1, 3) WHEN 'TAP' THEN CASE WHEN SUBSTR(AT_OFFENDER_BOOKING.STATUS_REASON, 5) IN ('14', '15', '16', '17', 'C1', 'R3', 'R6', 'R9', 'RO') THEN 1 ELSE 0 END ELSE 0 END ELSE 0 END) AS NO_TA_OFFENDERS_ON_HOME_LEAVE, SUM(CASE AT_OFFENDER_BOOKING.IN_OUT_STATUS WHEN 'OUT' THEN CASE SUBSTR(AT_OFFENDER_BOOKING.STATUS_REASON, 1, 3) WHEN 'TAP' THEN CASE WHEN SUBSTR(AT_OFFENDER_BOOKING.STATUS_REASON, 5) IN ('C5', 'C6', '5') THEN 1 ELSE 0 END ELSE 0 END ELSE 0 END) AS NO_TA_OFFENDERS_AT_HOSPITAL, SUM(CASE AT_OFFENDER_BOOKING.IN_OUT_STATUS WHEN 'OUT' THEN CASE SUBSTR(AT_OFFENDER_BOOKING.STATUS_REASON, 1, 3) WHEN 'TAP' THEN CASE WHEN NOT SUBSTR(AT_OFFENDER_BOOKING.STATUS_REASON, 5) IN ('14', '15', '16', 'C5', 'C6', '5', '17', 'C1', 'R3', 'R6', 'R9', 'RO') THEN 1 ELSE 0 END ELSE 0 END ELSE 0 END) AS NO_TA_OFFENDERS_AT_OTHER, SUM(CASE AT_OFFENDER_BOOKING.IN_OUT_STATUS WHEN 'IN' THEN 1 ELSE 0 END) AS NUMBER_OF_OFFENDERS_IN, AT_OFFENDERS_LOCATIONS.DESCRIPTION, CASE WHEN TRUNC(MONTHS_BETWEEN(CURRENT_TIMESTAMP, AT_OFFENDER.BIRTH_DATE) / 12) <= 17 THEN 'Juvenile' WHEN TRUNC(MONTHS_BETWEEN(CURRENT_TIMESTAMP, AT_OFFENDER.BIRTH_DATE) / 12) >= 18 AND TRUNC(MONTHS_BETWEEN(CURRENT_TIMESTAMP, AT_OFFENDER.BIRTH_DATE) / 12) <= 20 THEN 'Young Person' ELSE 'Adult' END AS ADULT_YOUNG_PERSON_JUVENILE_37 FROM OMS_OWNER.OFFENDERS AT_OFFENDER, OMS_OWNER.OFFENDER_BOOKINGS AT_OFFENDER_BOOKING, OMS_OWNER.AGENCY_LOCATIONS AT_OFFENDERS_LOCATIONS, OMS_OWNER.CASELOAD_AGENCY_LOCATIONS AT_CASELOAD_LOCATIONS, USER_ACCESSIBLE_CASELOADS WHERE (AT_OFFENDER.OFFENDER_ID = AT_OFFENDER_BOOKING.OFFENDER_ID) AND (AT_OFFENDERS_LOCATIONS.AGENCY_LOCATION_TYPE = 'INST') AND (USER_ACCESSIBLE_CASELOADS.USERNAME = UPPER('PBENSON')) AND (AT_OFFENDERS_LOCATIONS.AGY_LOC_ID = USER_ACCESSIBLE_CASELOADS.CASELOAD_ID) AND (AT_CASELOAD_LOCATIONS.AGY_LOC_ID = AT_OFFENDER_BOOKING.AGY_LOC_ID) AND (AT_CASELOAD_LOCATIONS.AGY_LOC_ID = AT_OFFENDERS_LOCATIONS.AGY_LOC_ID (+)) AND (NOT AT_CASELOAD_LOCATIONS.AGY_LOC_ID IN ('OUT', 'TRN') AND NOT AT_CASELOAD_LOCATIONS.CASELOAD_ID IN ('ADMINC', 'CADM_I', 'MULTI')) AND (USER_ACCESSIBLE_CASELOADS.USERNAME = UPPER('PBENSON')) AND AT_OFFENDERS_LOCATIONS.AGY_LOC_ID = (SELECT establishment_code FROM prompt_) AND (USER_ACCESSIBLE_CASELOADS.USERNAME = UPPER('PBENSON')) GROUP BY AT_OFFENDERS_LOCATIONS.DESCRIPTION, CASE WHEN TRUNC(MONTHS_BETWEEN(CURRENT_TIMESTAMP, AT_OFFENDER.BIRTH_DATE) / 12) <= 17 THEN 'Juvenile' WHEN TRUNC(MONTHS_BETWEEN(CURRENT_TIMESTAMP, AT_OFFENDER.BIRTH_DATE) / 12) >= 18 AND TRUNC(MONTHS_BETWEEN(CURRENT_TIMESTAMP, AT_OFFENDER.BIRTH_DATE) / 12) <= 20 THEN 'Young Person' ELSE 'Adult' END), dataset_ AS (SELECT NO_TA_OFFENDERS_ON_HOME_LEAVE, NO_TA_OFFENDERS_AT_HOSPITAL, NO_TA_OFFENDERS_AT_OTHER, NUMBER_OF_OFFENDERS_IN, DESCRIPTION, ADULT_YOUNG_PERSON_JUVENILE_37 FROM dataset_base_)",
      "parameters": [
        {
          "index": 0,
          "name": "establishment_code",
          "filterType": "autocomplete",
          "reportFieldType": "string",
          "display": "Establishment",
          "description": "(SELECT establishment_code from prompt_)",
          "mandatory": "true",
          "referenceType": "establishment"
        }
      ],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "NO_TA_OFFENDERS_ON_HOME_LEAVE",
            "type": "double",
            "display": "No TA Offenders on Home Leave",
            "legacyId": "DPd.DO107ea",
            "legacySqlClass": "column"
          },
          {
            "index": 1,
            "name": "NO_TA_OFFENDERS_AT_HOSPITAL",
            "type": "double",
            "display": "No TA Offenders at Hospital",
            "legacyId": "DPd.DO107eb",
            "legacySqlClass": "column"
          },
          {
            "index": 2,
            "name": "NO_TA_OFFENDERS_AT_OTHER",
            "type": "double",
            "display": "No TA Offenders at Other",
            "legacyId": "DPd.DO107ec",
            "legacySqlClass": "column"
          },
          {
            "index": 3,
            "name": "NUMBER_OF_OFFENDERS_IN",
            "type": "double",
            "display": "Number of Offenders In",
            "legacyId": "DPd.DO1081a",
            "legacySqlClass": "column"
          },
          {
            "index": 4,
            "name": "DESCRIPTION",
            "type": "string",
            "display": "Establishment Name",
            "legacyId": "DPd.DO1033b",
            "legacySqlClass": "column"
          },
          {
            "index": 5,
            "name": "ADULT_YOUNG_PERSON_JUVENILE_37",
            "type": "string",
            "display": "Adult / Young Person / Juvenile Indicator",
            "legacyId": "DPd.DO108b9",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3376286/DP5",
      "name": "In",
      "description": "Sentence",
      "datasource": "nomis",
      "query": "dataset_base_ AS (SELECT DISTINCT COUNT(AT_OFFENDER_EXTERNAL_MOVEMENTS.OFFENDER_BOOK_ID || AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_SEQ) AS NUMBER_OF_MOVEMENTS FROM OMS_OWNER.AGENCY_LOCATIONS AT_MOV_LOC_TO_OFFND_LOCTION, OMS_OWNER.OFFENDER_EXTERNAL_MOVEMENTS AT_OFFENDER_EXTERNAL_MOVEMENTS, USER_ACCESSIBLE_CASELOADS USER_ACCESS_CLDS_MVMTS_TO WHERE (AT_OFFENDER_EXTERNAL_MOVEMENTS.TO_AGY_LOC_ID = AT_MOV_LOC_TO_OFFND_LOCTION.AGY_LOC_ID (+)) AND (USER_ACCESS_CLDS_MVMTS_TO.CASELOAD_ID = AT_MOV_LOC_TO_OFFND_LOCTION.AGY_LOC_ID) AND (USER_ACCESS_CLDS_MVMTS_TO.USERNAME = UPPER('DPRWS')) AND (AT_OFFENDER_EXTERNAL_MOVEMENTS.DIRECTION_CODE = 'IN' AND (AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_TIME < CURRENT_TIMESTAMP AND TRUNC(AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_TIME) = TRUNC(CURRENT_TIMESTAMP)) AND AT_OFFENDER_EXTERNAL_MOVEMENTS.TO_AGY_LOC_ID = (SELECT establishment_code FROM prompt_) AND (USER_ACCESS_CLDS_MVMTS_TO.USERNAME = UPPER('DPRWS')))), dataset_ AS (SELECT NUMBER_OF_MOVEMENTS FROM dataset_base_)",
      "parameters": [
        {
          "index": 0,
          "name": "establishment_code",
          "filterType": "autocomplete",
          "reportFieldType": "string",
          "display": "Establishment",
          "description": "(SELECT establishment_code from prompt_)",
          "mandatory": "true",
          "referenceType": "establishment"
        }
      ],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "NUMBER_OF_MOVEMENTS",
            "type": "double",
            "display": "Number of Movements",
            "legacyId": "DP5.DO108b4",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3376286/DP6",
      "name": "Out",
      "description": "Sentence",
      "datasource": "nomis",
      "query": "dataset_base_ AS (SELECT COUNT(AT_OFFENDER_EXTERNAL_MOVEMENTS.OFFENDER_BOOK_ID || AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_SEQ) AS NUMBER_OF_MOVEMENTS FROM OMS_OWNER.AGENCY_LOCATIONS AT_MOV_LOC_FROM_OFFND_LOCTION, OMS_OWNER.OFFENDER_EXTERNAL_MOVEMENTS AT_OFFENDER_EXTERNAL_MOVEMENTS, USER_ACCESSIBLE_CASELOADS USER_ACCESS_CLDS_MVMTS_FROM WHERE (USER_ACCESS_CLDS_MVMTS_FROM.USERNAME = UPPER('DPRWS')) AND (AT_OFFENDER_EXTERNAL_MOVEMENTS.FROM_AGY_LOC_ID = AT_MOV_LOC_FROM_OFFND_LOCTION.AGY_LOC_ID (+)) AND (USER_ACCESS_CLDS_MVMTS_FROM.CASELOAD_ID = AT_MOV_LOC_FROM_OFFND_LOCTION.AGY_LOC_ID) AND (AT_OFFENDER_EXTERNAL_MOVEMENTS.DIRECTION_CODE = 'OUT' AND (AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_TIME < CURRENT_TIMESTAMP AND TRUNC(AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_TIME) = TRUNC(CURRENT_TIMESTAMP)) AND AT_OFFENDER_EXTERNAL_MOVEMENTS.FROM_AGY_LOC_ID = (SELECT establishment_code FROM prompt_) AND (USER_ACCESS_CLDS_MVMTS_FROM.USERNAME = UPPER('DPRWS')))), dataset_ AS (SELECT NUMBER_OF_MOVEMENTS FROM dataset_base_)",
      "parameters": [
        {
          "index": 0,
          "name": "establishment_code",
          "filterType": "autocomplete",
          "reportFieldType": "string",
          "display": "Establishment",
          "description": "(SELECT establishment_code from prompt_)",
          "mandatory": "true",
          "referenceType": "establishment"
        }
      ],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "NUMBER_OF_MOVEMENTS",
            "type": "double",
            "display": "Number of Movements",
            "legacyId": "DP6.DO108b4",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3376286/DP9",
      "name": "Escape",
      "description": "Sentence",
      "datasource": "nomis",
      "query": "dataset_base_ AS (SELECT DISTINCT count(AT_OFFENDER_EXTERNAL_MOVEMENTS.OFFENDER_BOOK_ID||AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_SEQ) FROM OMS_OWNER.AGENCY_LOCATIONS AT_MOV_LOC_FROM_OFFND_LOCTION, OMS_OWNER.OFFENDER_EXTERNAL_MOVEMENTS AT_OFFENDER_EXTERNAL_MOVEMENTS, ( --SELECT  -- max(MOVEMENT_SEQ) AS MOVEMENT_SEQ --FROM -- OMS_OWNER.OFFENDER_EXTERNAL_MOVEMENTS --GROUP BY -- OFFENDER_BOOK_ID SELECT OFFENDER_BOOK_ID, MOVEMENT_SEQ, MAX(MOVEMENT_TIME) AS MOVEMENT_TIME FROM OMS_OWNER.OFFENDER_EXTERNAL_MOVEMENTS WHERE ACTIVE_FLAG = 'Y' GROUP BY OFFENDER_BOOK_ID, MOVEMENT_SEQ ) DT_LATEST_EXTERNAL_MOVEMENT, USER_ACCESSIBLE_CASELOADS USER_ACCESS_CLDS_MVMTS_FROM WHERE ( DT_LATEST_EXTERNAL_MOVEMENT.OFFENDER_BOOK_ID=AT_OFFENDER_EXTERNAL_MOVEMENTS.OFFENDER_BOOK_ID and DT_LATEST_EXTERNAL_MOVEMENT.MOVEMENT_SEQ=AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_SEQ ) AND ( USER_ACCESS_CLDS_MVMTS_FROM.USERNAME=UPPER('DPRWS') ) AND ( AT_OFFENDER_EXTERNAL_MOVEMENTS.FROM_AGY_LOC_ID=AT_MOV_LOC_FROM_OFFND_LOCTION.AGY_LOC_ID(+) ) AND ( USER_ACCESS_CLDS_MVMTS_FROM.CASELOAD_ID=AT_MOV_LOC_FROM_OFFND_LOCTION.AGY_LOC_ID ) AND ( AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_REASON_CODE = 'ESCP' AND AT_OFFENDER_EXTERNAL_MOVEMENTS.FROM_AGY_LOC_ID = (SELECT establishment_code from prompt_) AND ( DT_LATEST_EXTERNAL_MOVEMENT.OFFENDER_BOOK_ID=AT_OFFENDER_EXTERNAL_MOVEMENTS.OFFENDER_BOOK_ID and DT_LATEST_EXTERNAL_MOVEMENT.MOVEMENT_SEQ=AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_SEQ ) AND ( USER_ACCESS_CLDS_MVMTS_FROM.USERNAME=UPPER('DPRWS') ) )), dataset_ AS (SELECT FROM dataset_base_)",
      "parameters": [
        {
          "index": 0,
          "name": "establishment_code",
          "filterType": "autocomplete",
          "reportFieldType": "string",
          "display": "Establishment",
          "description": "(SELECT establishment_code from prompt_)",
          "mandatory": "true",
          "referenceType": "establishment"
        }
      ],
      "schema": {
        "field": []
      }
    },
    {
      "id": "3376286/DPa",
      "name": "Abscond",
      "description": "Sentence",
      "datasource": "nomis",
      "query": "dataset_base_ AS (SELECT count(AT_OFFENDER_EXTERNAL_MOVEMENTS.OFFENDER_BOOK_ID||AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_SEQ) FROM OMS_OWNER.AGENCY_LOCATIONS AT_MOV_LOC_FROM_OFFND_LOCTION, OMS_OWNER.OFFENDER_EXTERNAL_MOVEMENTS AT_OFFENDER_EXTERNAL_MOVEMENTS, ( --SELECT  -- max(MOVEMENT_SEQ) AS MOVEMENT_SEQ --FROM -- OMS_OWNER.OFFENDER_EXTERNAL_MOVEMENTS --GROUP BY -- OFFENDER_BOOK_ID SELECT OFFENDER_BOOK_ID, MOVEMENT_SEQ, MAX(MOVEMENT_TIME) AS MOVEMENT_TIME FROM OMS_OWNER.OFFENDER_EXTERNAL_MOVEMENTS WHERE ACTIVE_FLAG = 'Y' GROUP BY OFFENDER_BOOK_ID, MOVEMENT_SEQ ) DT_LATEST_EXTERNAL_MOVEMENT, USER_ACCESSIBLE_CASELOADS USER_ACCESS_CLDS_MVMTS_FROM WHERE ( DT_LATEST_EXTERNAL_MOVEMENT.OFFENDER_BOOK_ID=AT_OFFENDER_EXTERNAL_MOVEMENTS.OFFENDER_BOOK_ID and DT_LATEST_EXTERNAL_MOVEMENT.MOVEMENT_SEQ=AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_SEQ ) AND ( USER_ACCESS_CLDS_MVMTS_FROM.USERNAME=UPPER('DPRWS') ) AND ( AT_OFFENDER_EXTERNAL_MOVEMENTS.FROM_AGY_LOC_ID=AT_MOV_LOC_FROM_OFFND_LOCTION.AGY_LOC_ID(+) ) AND ( USER_ACCESS_CLDS_MVMTS_FROM.CASELOAD_ID=AT_MOV_LOC_FROM_OFFND_LOCTION.AGY_LOC_ID ) AND ( AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_REASON_CODE = 'UAL' AND AT_OFFENDER_EXTERNAL_MOVEMENTS.FROM_AGY_LOC_ID = (SELECT establishment_code from prompt_) AND ( DT_LATEST_EXTERNAL_MOVEMENT.OFFENDER_BOOK_ID=AT_OFFENDER_EXTERNAL_MOVEMENTS.OFFENDER_BOOK_ID and DT_LATEST_EXTERNAL_MOVEMENT.MOVEMENT_SEQ=AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_SEQ ) AND ( USER_ACCESS_CLDS_MVMTS_FROM.USERNAME=UPPER('DPRWS') ) )), dataset_ AS (SELECT FROM dataset_base_)",
      "parameters": [
        {
          "index": 0,
          "name": "establishment_code",
          "filterType": "autocomplete",
          "reportFieldType": "string",
          "display": "Establishment",
          "description": "(SELECT establishment_code from prompt_)",
          "mandatory": "true",
          "referenceType": "establishment"
        }
      ],
      "schema": {
        "field": []
      }
    },
    {
      "id": "3376286/DPf",
      "name": "Penultimate Movement",
      "description": "Sentence",
      "datasource": "nomis",
      "query": "dataset_base_ AS (SELECT DISTINCT count(AT_OFFENDER_EXTERNAL_MOVEMENTS.OFFENDER_BOOK_ID||AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_SEQ) FROM OMS_OWNER.REFERENCE_CODES AT_MOV_TYPE_DESC, OMS_OWNER.AGENCY_LOCATIONS AT_MOV_LOC_FROM_OFFND_LOCTION, OMS_OWNER.OFFENDER_EXTERNAL_MOVEMENTS AT_OFFENDER_EXTERNAL_MOVEMENTS, USER_ACCESSIBLE_CASELOADS USER_ACCESS_CLDS_MVMTS_FROM WHERE ( AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_TYPE=AT_MOV_TYPE_DESC.CODE(+) ) AND ( AT_MOV_TYPE_DESC.DOMAIN(+)=('MOVE_TYPE') ) AND ( USER_ACCESS_CLDS_MVMTS_FROM.USERNAME=UPPER('PBENSON') ) AND ( AT_OFFENDER_EXTERNAL_MOVEMENTS.FROM_AGY_LOC_ID=AT_MOV_LOC_FROM_OFFND_LOCTION.AGY_LOC_ID(+) ) AND ( USER_ACCESS_CLDS_MVMTS_FROM.CASELOAD_ID=AT_MOV_LOC_FROM_OFFND_LOCTION.AGY_LOC_ID ) AND ( AT_OFFENDER_EXTERNAL_MOVEMENTS.FROM_AGY_LOC_ID = (SELECT establishment_code from prompt_) AND ( AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_REASON_CODE In ( 'UAL','ESCP' ) OR AT_MOV_TYPE_DESC.CODE = 'TRN' ) AND ( AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_TIME<sysdate and trunc(AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_TIME)=trunc(sysdate) ) AND ( USER_ACCESS_CLDS_MVMTS_FROM.USERNAME=UPPER('PBENSON') ) AND AT_OFFENDER_EXTERNAL_MOVEMENTS.OFFENDER_BOOK_ID In ( SELECT DISTINCT DT_PENULTIMATE_OUT_MOVEMENTS.OFFENDER_BOOK_ID FROM ( --This enjoyable piece of SQL creates a table of booking references where the prisoner has had --a temporary release followed by either an escape, abscond or transfer. --This is to cope with an indequacy in the front end system wherby it allows the escape/abscond or transfer -- even though the prisoner is already out on temp release. The consequence of it is the discharge count -- in the ACC0006 report will be too high. -- This table is used in the report which finds prisoners with a movement out and compares those found -- with entries on this table. It then countst hos that have a matching entry on this table. --Extra filters are done in the report to acheive this. -- --Firstly select the maximum non-active movement -- (Select AT_OFFENDER_EXTERNAL_MVEMENTS2.OFFENDER_BOOK_ID, AT_OFFENDER_EXTERNAL_MVEMENTS2.direction_code, AT_OFFENDER_EXTERNAL_MVEMENTS2.MOVEMENT_TIME, AT_OFFENDER_EXTERNAL_MVEMENTS2.FROM_AGY_LOC_ID, AT_OFFENDER_EXTERNAL_MVEMENTS2.TO_AGY_LOC_ID from OMS_OWNER.OFFENDER_EXTERNAL_MOVEMENTS AT_OFFENDER_EXTERNAL_MVEMENTS2 Where AT_OFFENDER_EXTERNAL_MVEMENTS2.active_flag = 'N' AND ( (AT_OFFENDER_EXTERNAL_MVEMENTS2.OFFENDER_BOOK_ID, AT_OFFENDER_EXTERNAL_MVEMENTS2.MOVEMENT_TIME) in (Select AT_OFFENDER_EXTERNAL_MVEMENTS3.OFFENDER_BOOK_ID, Max(AT_OFFENDER_EXTERNAL_MVEMENTS3.MOVEMENT_TIME) as time From OMS_OWNER.OFFENDER_EXTERNAL_MOVEMENTS AT_OFFENDER_EXTERNAL_MVEMENTS3 where AT_OFFENDER_EXTERNAL_MVEMENTS3.MOVEMENT_TIME < -- -- get the max time related row for today that has the same bookid and establishment as the -- previous imbedded select. The max allows for the fact that 2 TRN's can be entered after the  -- TAP. if we dont use MAX it gets multiple rows in the sub select.  --  \t\t(select max(AT_OFFENDER_EXTERNAL_MoVEMENTS.MOVEMENT_TIME)  \t\t\tfrom OMS_OWNER.OFFENDER_EXTERNAL_MOVEMENTS  AT_OFFENDER_EXTERNAL_MOVEMENTS   \t\twhere   \t\t\tAT_OFFENDER_EXTERNAL_MOVEMENTS.OFFENDER_BOOK_ID =                                                            AT_OFFENDER_EXTERNAL_MVEMENTS3.OFFENDER_BOOK_ID   \t\t\tAND  \t\t\tAT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_TIME<sysdate   \tand   \ttrunc(AT_OFFENDER_EXTERNAL_MOVEMENTS.MOVEMENT_TIME)=trunc(sysdate)  \t\t\tand                           (AT_OFFENDER_EXTERNAL_MOVEMENTS.Movement_reason_code in ('UAL','ESCP')  \t\t\tor (AT_OFFENDER_EXTERNAL_MOVEMENTS.Movement_type = 'TRN'   \t\t\tand at_offender_external_movements.from_agy_loc_id = at_offender_external_mvements3.from_agy_loc_id)))                    group by   \t\t AT_OFFENDER_EXTERNAL_MVEMENTS3.OFFENDER_BOOK_ID                   ))  )   )  DT_PENULTIMATE_OUT_MOVEMENTS      WHERE        (         DT_PENULTIMATE_OUT_MOVEMENTS.DIRECTION_CODE  =  'OUT'         AND         DT_PENULTIMATE_OUT_MOVEMENTS.FROM_AGY_LOC_ID  =  'ALI ) ) )), dataset_ AS (SELECT FROM dataset_base_)",
      "parameters": [
        {
          "index": 0,
          "name": "establishment_code",
          "filterType": "autocomplete",
          "reportFieldType": "string",
          "display": "Establishment",
          "description": "(SELECT establishment_code from prompt_)",
          "mandatory": "true",
          "referenceType": "establishment"
        }
      ],
      "schema": {
        "field": []
      }
    }
  ],
  "policy": [
    {
      "id": "access",
      "type": "access",
      "rule": [
        {
          "effect": "permit",
          "condition": [
            {
              "match": [
                "${role}",
                "ROLE_PRISONS_REPORTING_USER"
              ]
            }
          ]
        }
      ]
    }
  ],
  "report": [
    {
      "id": "38240.RS",
      "name": "Print Establishment Totals",
      "classification": "OFFICIAL",
      "version": "1.0.0",
      "render": "HTML",
      "dataset": "3376286/DPd",
      "feature": [
        {
          "type": "print"
        }
      ],
      "specification": {
        "template": "list-tab",
        "field": [
          {
            "name": "$ref:NUMBER_OF_OFFENDERS_IN",
            "display": "Number of Offenders In",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": "DPd.DO1081a"
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "type": "enhanced",
      "error": "dataset::fixSqlFormatting sql is not valid",
      "entityId": "oked5PoADqbaNlUAlAGEcEPm5L8",
      "entityType": "dpd"
    },
    {
      "type": "enhanced",
      "error": "dataset::fixSqlFormatting sql is not valid",
      "entityId": "oked5PoADqbaNlUAlAGEcEPm5L8",
      "entityType": "dpd"
    },
    {
      "type": "enhanced",
      "error": "dataset::fixSqlFormatting sql is not valid",
      "entityId": "oked5PoADqbaNlUAlAGEcEPm5L8",
      "entityType": "dpd"
    },
    {
      "type": "schema",
      "error": "Dataset does not have any schema fields (comments -- in query)",
      "entityId": "3376286/DP9",
      "entityType": "dataset"
    },
    {
      "type": "schema",
      "error": "Dataset does not have any schema fields (comments -- in query)",
      "entityId": "3376286/DPa",
      "entityType": "dataset"
    },
    {
      "type": "schema",
      "error": "Dataset does not have any schema fields (comments -- in query)",
      "entityId": "3376286/DPf",
      "entityType": "dataset"
    },
    {
      "type": "sqlQuery",
      "error": "Error: NJS-005: invalid value for parameter 1",
      "entityId": "3376286/DP9",
      "entityType": "dataset"
    },
    {
      "type": "sqlQuery",
      "error": "Error: NJS-005: invalid value for parameter 1",
      "entityId": "3376286/DPa",
      "entityType": "dataset"
    },
    {
      "type": "sqlQuery",
      "error": "Error: NJS-005: invalid value for parameter 1",
      "entityId": "3376286/DPf",
      "entityType": "dataset"
    }
  ]
}