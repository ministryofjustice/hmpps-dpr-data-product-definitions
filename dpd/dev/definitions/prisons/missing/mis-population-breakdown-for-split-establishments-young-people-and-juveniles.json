{
  "id": "kleHrb0AC8tQV04A0.8AFE.rcVQ",
  "name": "MIS Population Breakdown for Split Establishments Young People and Juveniles",
  "metadata": {
    "version": "1.0.0",
    "tags": [
      "IOP0004 v00.00.09"
    ]
  },
  "description": "This HM Inspectorate of Prisons report provides the population breakdown for young people and juveniles within an establishment which has a split population e.g. the establishment is both an HMP and YOI and houses adults in one wing and young people/juveniles in another wing. The report prompts for one or more wing(s) to allow you to differentiate between the different populations within your establishment.<br/>IOP0004 v00.00.09 Last Modified: 12/10/2017",
  "datasource": [
    {
      "id": "bodmis",
      "name": "BODMIS",
      "database": "DIGITAL_PRISON_REPORTING",
      "catalog": "bodmis"
    }
  ],
  "dataset": [
    {
      "id": "3375368/DP0",
      "name": "Prisoners",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT AT_OFFENDER_BOOKING.OFFENDER_ID_DISPLAY, AT_OFFENDER_BOOKING.SURNAME, AT_OFFENDER_BOOKING.FIRST_NAME, AT_OFFENDER_BOOKING.IN_OUT, FLOOR((MONTHS_BETWEEN((TRUNC(CURRENT_TIMESTAMP)), (CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END))) / 12) AS OFFENDER_AGE, CASE WHEN AT_DIM_ETHNICITY_CODES.CODE = 'MERGE' THEN 'Not stated' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'NS' THEN 'Not stated' WHEN AT_DIM_ETHNICITY_CODES.CODE IS NULL THEN 'Not stated' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('O9', 'O2') THEN 'Other ethnic group' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'NS' THEN 'Not stated' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('B1', 'B2', 'B9') THEN 'Black or Black British' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('A1', 'A2', 'A3', 'A4', 'A9', 'O1') THEN 'Asian or Asian British' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('M1', 'M2', 'M3', 'M9') THEN 'Mixed' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('W1', 'W2', 'W3', 'W8', 'W9') THEN 'White' END AS IOP_ETHNIC_GROUPING, CASE WHEN (FLOOR((MONTHS_BETWEEN((TRUNC(CURRENT_TIMESTAMP)), (CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END))) / 12)) = 15 THEN '15 years' WHEN (FLOOR((MONTHS_BETWEEN((TRUNC(CURRENT_TIMESTAMP)), (CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END))) / 12)) = 16 THEN '16 years' WHEN (FLOOR((MONTHS_BETWEEN((TRUNC(CURRENT_TIMESTAMP)), (CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END))) / 12)) = 17 THEN '17 years' WHEN (FLOOR((MONTHS_BETWEEN((TRUNC(CURRENT_TIMESTAMP)), (CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END))) / 12)) = 18 THEN '18 years' ELSE 'Other' END AS JUVENILE_AGE_BAND_IN_YEARS, CASE WHEN AT_DIM_ETHNICITY_CODES.CODE = 'MERGE' THEN 'Code Missing' WHEN AT_DIM_ETHNICITY_CODES.CODE IS NULL THEN 'Code Missing' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'W8' THEN 'White: Gypsy or Irish Traveller' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'O1' THEN 'Asian/Asian British: Chinese' ELSE AT_DIM_ETHNICITY_CODES.DESCRIPTION END AS ETHNIC_DESCRIPTION, CASE WHEN AT_OFFENDER_BOOKING.NATIONALITY_CODE = 'BRIT' THEN 'British' WHEN AT_OFFENDER_BOOKING.NATIONALITY_CODE IN ('UNKNOWN', 'REF', 'STATE') THEN 'Not stated' WHEN AT_OFFENDER_BOOKING.NATIONALITY_CODE IS NULL THEN 'Not stated' ELSE 'Foreign nationals' END AS NATIONALITY_GROUPING, CASE WHEN AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE IN ('14FTR_ORA', '14FTRHDC_ORA', 'CUR_ORA', 'FTR/08', 'FTR_HDC', 'FTR_HDC_ORA', 'FTR_ORA', 'FTR_SCH15', 'FTRSCH15_ORA', 'HDR_ORA', 'LR', 'LR_ALP', 'LR_ALP_LASPO', 'LR_DLP', 'LR_DPP', 'LR_EPP', 'LR_ES', 'LR_HDC', 'LR_IPP', 'LR_LASPO_AR', 'LR_LASPO_DR', 'LR_LIFE', 'LR_MLP', 'LR_ORA', 'LR_SEC236A', 'LR_SEC91_ORA', 'LR_YOI', 'LR_YOI_ORA') THEN 'Recall' WHEN AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND = '0' THEN 'Dead' WHEN AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND = '1' THEN 'Indeterminate Sentence' WHEN AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND IN ('2', '3') THEN 'Sentenced' WHEN AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND IN ('4', '5', '6', '7') THEN 'Convicted Unsentenced' WHEN AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND IN ('9', '10') OR AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE = 'CIV_RMD' THEN 'Civil Prisoner' WHEN AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND IN ('8', '11') THEN 'Immigration Detainee' WHEN AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND IN ('12', '13', '14') THEN 'Remand' WHEN AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE = 'UNKNOWN' THEN 'Unknown' ELSE 'Other' END AS LEGAL_STATUS_GROUPING, CASE WHEN AT_OFFENDER_BOOKING.RELIGION_CODE IS NULL THEN 'Not stated' WHEN AT_OFFENDER_BOOKING.RELIGION_CODE = 'BAPT' THEN 'Baptist' WHEN AT_OFFENDER_BOOKING.RELIGION_CODE IN ('COFE', 'COFI') THEN 'Church of England' WHEN AT_OFFENDER_BOOKING.RELIGION_CODE = 'RC' THEN 'Roman Catholic' WHEN AT_OFFENDER_BOOKING.RELIGION_CODE = 'SIKH' THEN 'Sikh' WHEN AT_OFFENDER_BOOKING.RELIGION_CODE = 'UNKN' THEN 'Not stated' WHEN AT_OFFENDER_BOOKING.RELIGION_CODE = 'BUDD' THEN 'Buddhist' WHEN AT_OFFENDER_BOOKING.RELIGION_CODE = 'HIND' THEN 'Hindu' WHEN AT_OFFENDER_BOOKING.RELIGION_CODE = 'JEW' THEN 'Jewish' WHEN AT_OFFENDER_BOOKING.RELIGION_CODE IN ('BLAC', 'SHIA', 'SUNI', 'MOS') THEN 'Muslim' WHEN AT_OFFENDER_BOOKING.RELIGION_CODE IN ('AGNO', 'ATHE', 'NIL') THEN 'No religion' WHEN AT_OFFENDER_BOOKING.RELIGION_CODE IN ('BAHA', 'DRU', 'HARE', 'JAIN', 'NONP', 'OTH', 'PAG', 'PARS', 'RAST', 'SATN', 'SCIE', 'SHIN', 'TAO', 'ZORO') THEN 'Other' ELSE 'Other Christian denominations' END AS IOP_RELIGION_GROUPING, CASE WHEN DT_LIFEFLAG.LIFE_SENTENCE_FLAG = 'Y' THEN 'Sentenced' WHEN DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH = '00/00/00' THEN 'Unsentenced' WHEN DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH IS NULL THEN 'Unsentenced' ELSE 'Sentenced' END AS SENTENCED_, CASE WHEN MONTHS_BETWEEN(DT_ADMISSION.LOAD_DATE, DT_ADMISSION.MOVEMENT_TIME) < 1 THEN '<1 mth' WHEN MONTHS_BETWEEN(DT_ADMISSION.LOAD_DATE, DT_ADMISSION.MOVEMENT_TIME) >= 1 AND MONTHS_BETWEEN(DT_ADMISSION.LOAD_DATE, DT_ADMISSION.MOVEMENT_TIME) < 3 THEN '1-3 mths' WHEN MONTHS_BETWEEN(DT_ADMISSION.LOAD_DATE, DT_ADMISSION.MOVEMENT_TIME) >= 3 AND MONTHS_BETWEEN(DT_ADMISSION.LOAD_DATE, DT_ADMISSION.MOVEMENT_TIME) < 6 THEN '3-6 mths' WHEN MONTHS_BETWEEN(DT_ADMISSION.LOAD_DATE, DT_ADMISSION.MOVEMENT_TIME) >= 6 AND MONTHS_BETWEEN(DT_ADMISSION.LOAD_DATE, DT_ADMISSION.MOVEMENT_TIME) < 12 THEN '6-12 mths' WHEN MONTHS_BETWEEN(DT_ADMISSION.LOAD_DATE, DT_ADMISSION.MOVEMENT_TIME) >= 12 AND MONTHS_BETWEEN(DT_ADMISSION.LOAD_DATE, DT_ADMISSION.MOVEMENT_TIME) < 24 THEN '1-2 yrs' WHEN MONTHS_BETWEEN(DT_ADMISSION.LOAD_DATE, DT_ADMISSION.MOVEMENT_TIME) >= 24 THEN '2 yrs+' END AS LENGTH_OF_STAY_ABBREV_, CASE WHEN AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE IN ('DTO', 'DTO_YOI', 'DTOR_104', 'DTOR_105', 'DTO_ORA', 'REFER') THEN 'Y' ELSE 'N' END AS IS_DTO_, CASE WHEN AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE IN ('EXSENT03', 'EXSENT08', 'LR_EPP') THEN 'Y' ELSE 'N' END AS IS_EXTENDED_SENTENCE_UNDER_S39, CASE WHEN AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE IN ('SEC91', 'SEC91_03', 'LR_SEC91_ORA', 'SEC91_03_ORA') THEN 'Y' ELSE 'N' END AS IS_SECTION_53_91_, CASE WHEN AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND = '1' THEN 'Y' ELSE 'N' END AS IS_INDETERMINATE_SENTENCE_, CASE WHEN AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE IN ('LR_LIFE', 'LR_S53', 'LR_S53_2', 'LR_YOI', 'LR_DPP', 'LR_EPP', 'LR_IPP') THEN 'Recall' WHEN AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE IN ('HMP', 'HMPL') THEN 'HMP' WHEN AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE IN ('SEC90', 'SEC90_03') THEN 'Section 90' WHEN AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE = 'SEC53' THEN 'Section 53 (1)' WHEN AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE = 'IPP' THEN 'ISPPCJ03' ELSE NULL END /* DTO Sentence Bands --get DTOs CASE When AT_OFFENDER_BOOKING.main_legal_status_code IN('DTO','DTO_YOI','DTOR_104','DTOR_105') then -- find DTO sentences up to and including 4 months and put into '4 Months' band Case When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =3 then '<=4 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =4 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=4 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =00 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) >0 then '<=4 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =0 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) >0 then '<=4 mths' --find DTO sentences between 4 months and 1 day and exactly 6 months and put into '6 Months' band When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =4 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) between 1 and 28 then '<=6 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =5 then '<=6 Months' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =6 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=6 Months' --find sentences between 6 months and 1 day and exactly 8 months and put into '8 Months' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =6 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) between 1 and 28 then '<=8 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =7 then '<=8 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =8 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=8 mths' --find DTO sentences between 8 months 1 day and exactly 10 months and put into '10 Months' band When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =9 then '<=10 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =8 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) between 1 and 28 then '<=10 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =10 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=10 mths' --find DTO sentences between 10 months and 1 day and exactly 12 months and put into '12 Months' band When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =10 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) between 1 and 28 then '<=12 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='01' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =0 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=12 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='01' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =11 then '<=12 mths' --find DTO sentences between 12 months and 1 day and exactly 18 months and put into '18 Months' band When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='01' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) between 1 and 6 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=18 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='01' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =0 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) between 0 and 28 then '<=18 mths' -- find DTO sentences between than 18 months and 1 day and exactly 24 months and put into '24 Months' band When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='02' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =0 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) between 0 and 28 then '<=24 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='02' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =0 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=24 mths' Else '24 mths+' End END, CASE When DT_LIFEFLAG.LIFE_SENTENCE_FLAG='Y' Then '5 yrs +' When substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) = '99' Then '5 yrs +' When DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH ='00/00/00' then 'No Sentence' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH is null then 'No Sentence' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<2 then 'Under 2 yrs' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2))<12 then 'Under 2 yrs' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) not in ('00','01') and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<3 then '2-3 yrs' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) not in ('00','01','02') and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<4 then '3-4 yrs' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) not in ('00','01','02','03') and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<5 then '4-5 yrs' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)) >=10 then '5 yrs +' Else 'Other' END, DT_ALL_LOCATIONS.LOCATION_DESC, AT_CELL.UNIT_4_SHORT_DESCRIPTION, AT_ESTABLISHMENT.ESTABLISHMENT_DESCRIPTION, COUNT(distinct(AT_OFFENDER_BOOKING.OFFENDER_ID_DISPLAY)) FROM ( select establishment_sk as LOCATION_SK,establishment_description as LOCATION_DESC,'Establishment' as LOCATION_TYPE from bodimis.dim_establishment UNION select court_sk, court_description, 'Court' from bodimis.dim_court UNION select probation_office_sk, prob_office_description, 'Probation Office' from bodimis.dim_probation_office UNION select outside_location_sk,outside_location_description, 'Outside Location' from bodimis.dim_outside_location ) DT_ALL_LOCATIONS, ( Select ob.offender_id_display, fme.offender_booking_sk, est.establishment_code_nk, fme.to_location_sk, fme.from_location_sk , fme.from_location_type, max(fme.MOVEMENT_SEQ ) as MOVEMENT_SEQ, max(d.day_date) as MOVEMENT_TIME, trunc(ETL.LOAD_END_DATETIME) as LOAD_DATE From BODIMIS.FACT_MOVEMENT_EXTERNAL fme, BODIMIS.DIM_OFFENDER_BOOKING ob, BODIMIS.DIM_ESTABLISHMENT est, BODIMIS.ETL_LOAD_LOG ETL, BODIMIS.DIM_DATE d Where ob.ESTABLISHMENT_SK=est.ESTABLISHMENT_SK and d.date_sk=fme.date_sk and fme.offender_booking_sk=ob.offender_booking_sk and ob.active_status IN('Active In','Active Out') And ob.MIS_CURRENT_RECORD_IND = 'Y' and ob.ACTIVE_FLAG = 'Y' and ETL.LOAD_ID=(select max(LOAD_ID) from BODIMIS.ETL_LOAD_LOG WHERE LOAD_END_DATETIME IS NOT NULL) And ob.ESTABLISHMENT_SK=fme.to_location_sk and fme.movement_seq= (select max(fme2.movement_seq ) from BODIMIS.FACT_MOVEMENT_EXTERNAL fme2 where fme.offender_booking_sk=fme2.offender_booking_sk and fme2.direction_code='IN' And fme2.TYPE='Admission' And fme2.To_location_type='Establishment' and fme2.reason_code <> 'R') GROUP BY ob.offender_id_display, fme.offender_booking_sk,est.establishment_code_nk,fme.to_location_sk,fme.from_location_sk,fme.from_location_type,ETL.LOAD_END_DATETIME ) DT_ADMISSION, BODIMIS.DIM_ESTABLISHMENT AT_ESTABLISHMENT, BODIMIS.DIM_ETHNICITY_CODES AT_DIM_ETHNICITY_CODES, BODIMIS.DIM_OFFENDER_BOOKING AT_OFFENDER_BOOKING, BODIMIS.DIM_DATE AT_DOB, ( SELECT BODIMIS.FACT_OFFENDER_SENTENCE.OFFENDER_BOOKING_SK, BODIMIS.FACT_OFFENDER_SENTENCE.EFFECTIVE_SENTENCE_LENGTH FROM BODIMIS.FACT_OFFENDER_SENTENCE WHERE ( BODIMIS.FACT_OFFENDER_SENTENCE.SENTENCE_CURRENT_FLAG='Y' ) ) DT_CURREFFSENLEN, (  SELECT distinct BODIMIS.FACT_CASE_SENTENCE_TERM.offender_booking_sk, BODIMIS.FACT_CASE_SENTENCE_TERM.LIFE_SENTENCE_FLAG FROM BODIMIS.FACT_CASE_SENTENCE_TERM, BODIMIS.FACT_CASE_SENTENCE, BODIMIS.DIM_SENTENCE_STATUS dss WHERE ( BODIMIS.FACT_CASE_SENTENCE.SENTENCE_STATUS_SK=dss.sentence_status_sk) AND dss.sentence_status='Active' AND ( BODIMIS.FACT_CASE_SENTENCE.OFFENDER_BOOKING_SK=BODIMIS.FACT_CASE_SENTENCE_TERM.OFFENDER_BOOKING_SK ) AND ( BODIMIS.FACT_CASE_SENTENCE.SENTENCE_SEQ_NK=BODIMIS.FACT_CASE_SENTENCE_TERM.SENTENCE_SEQ_NK ) AND ( BODIMIS.FACT_CASE_SENTENCE.COURT_CASE_SK=BODIMIS.FACT_CASE_SENTENCE_TERM.COURT_CASE_SK ) and BODIMIS.FACT_CASE_SENTENCE_TERM.LIFE_SENTENCE_FLAG='Y' ) DT_LIFEFLAG, BODIMIS.DIM_CELL AT_CELL WHERE ( AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK=DT_CURREFFSENLEN.OFFENDER_BOOKING_SK(+) ) AND ( AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK=DT_LIFEFLAG.OFFENDER_BOOKING_SK(+) ) AND ( AT_OFFENDER_BOOKING.BIRTH_DATE_SK=AT_DOB.DATE_SK ) AND ( AT_CELL.ESTABLISHMENT_SK=AT_ESTABLISHMENT.ESTABLISHMENT_SK ) AND ( AT_CELL.UNIT_4_SK=AT_OFFENDER_BOOKING.LIVING_UNIT_SK ) AND ( AT_ESTABLISHMENT.ACTIVE_FLAG='Y' ) AND ( AT_DIM_ETHNICITY_CODES.CODE(+)=AT_OFFENDER_BOOKING.ETHNICITY_CODE ) AND ( AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK IN (SELECT CSL.OFFENDER_BOOKING_SK FROM BODIMIS.DIM_STAFF_ACCESSIBLE_CASELOAD SAC, BODIMIS.DIM_CASELOAD_SECURITY_LIST CSL WHERE SAC.CASELOAD_ID=CSL.CASELOAD_CODE AND SAC.USERNAME = UPPER((SELECT username FROM context_ /*= #Variable('BOUSER') */ )) AND CSL.ENDYEAR >= to_char(sysdate,'YYYY')-6 ) ) AND ( AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK=DT_ADMISSION.OFFENDER_BOOKING_SK(+) ) AND ( DT_ADMISSION.FROM_LOCATION_SK=DT_ALL_LOCATIONS.LOCATION_SK (+) and DT_ADMISSION.FROM_LOCATION_TYPE=DT_ALL_LOCATIONS.LOCATION_TYPE(+) ) AND ( ( AT_OFFENDER_BOOKING.BOOKING_STATUS = 'O' ) AND ( case when 'All' in (SELECT WING FROM prompt_ /*= #Prompt('Wing (All for all)','A','Cell\\Unit Description 1',multi,free,Not_Persistent,User:80) */ ) then 'All' else AT_CELL.UNIT_1_DESCRIPTION end in @Variable('Wing (All for all)') ) AND ( AT_ESTABLISHMENT.ESTABLISHMENT_CODE_NK = (SELECT ESTABLISHMENT_CODE FROM prompt_ /*= #Prompt('Establishment Code','A','Establishment\\Establishment Code',mono,free,Not_Persistent,User:70) */ ) ) ) GROUP BY AT_OFFENDER_BOOKING.OFFENDER_ID_DISPLAY, AT_OFFENDER_BOOKING.SURNAME, AT_OFFENDER_BOOKING.FIRST_NAME, AT_OFFENDER_BOOKING.IN_OUT, floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12), Case When AT_DIM_ETHNICITY_CODES.CODE='MERGE' Then 'Not stated' When AT_DIM_ETHNICITY_CODES.CODE='NS' then 'Not stated' When AT_DIM_ETHNICITY_CODES.CODE IS NULL Then 'Not stated' When AT_DIM_ETHNICITY_CODES.CODE IN('O9','O2') Then 'Other ethnic group' When AT_DIM_ETHNICITY_CODES.CODE ='NS' then 'Not stated' When AT_DIM_ETHNICITY_CODES.CODE IN('B1','B2','B9') then 'Black or Black British' When AT_DIM_ETHNICITY_CODES.CODE IN('A1','A2','A3','A4','A9','O1') then 'Asian or Asian British' When AT_DIM_ETHNICITY_CODES.CODE IN('M1','M2','M3','M9') then 'Mixed' When AT_DIM_ETHNICITY_CODES.CODE IN('W1','W2','W3','W8','W9') then 'White' End , Case When ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) =15 then '15 years' When ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) =16 then '16 years' When ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) =17 then '17 years' When ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) =18 then '18 years' Else 'Other' End, CASE WHEN AT_DIM_ETHNICITY_CODES.CODE='MERGE' Then 'Code Missing' WHEN AT_DIM_ETHNICITY_CODES.CODE IS NULL Then 'Code Missing' when AT_DIM_ETHNICITY_CODES.CODE='W8' then 'White: Gypsy or Irish Traveller' when AT_DIM_ETHNICITY_CODES.CODE='O1' then 'Asian/Asian British: Chinese' ELSE AT_DIM_ETHNICITY_CODES.DESCRIPTION end, case when AT_OFFENDER_BOOKING.NATIONALITY_CODE='BRIT' then 'British' when AT_OFFENDER_BOOKING.NATIONALITY_CODE IN( 'UNKNOWN','REF','STATE') then 'Not stated' when AT_OFFENDER_BOOKING.NATIONALITY_CODE is null then 'Not stated' else 'Foreign nationals' END, Case when AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE In ('14FTR_ORA','14FTRHDC_ORA','CUR_ORA','FTR/08','FTR_HDC','FTR_HDC_ORA','FTR_ORA','FTR_SCH15','FTRSCH15_ORA','HDR_ORA','LR','LR_ALP','LR_ALP_LASPO','LR_DLP','LR_DPP','LR_EPP','LR_ES','LR_HDC','LR_IPP','LR_LASPO_AR','LR_LASPO_DR','LR_LIFE','LR_MLP','LR_ORA','LR_SEC236A','LR_SEC91_ORA','LR_YOI','LR_YOI_ORA') then 'Recall' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND = '0' then 'Dead' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND = '1' then 'Indeterminate Sentence' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('2','3') then 'Sentenced' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('4','5','6','7') then 'Convicted Unsentenced' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('9','10') or AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE = 'CIV_RMD' then 'Civil Prisoner' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('8','11') then 'Immigration Detainee' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('12','13','14') then 'Remand' when AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE = 'UNKNOWN' then 'Unknown' Else 'Other' End , Case when AT_OFFENDER_BOOKING.RELIGION_CODE is null then 'Not stated' when AT_OFFENDER_BOOKING.RELIGION_CODE='BAPT' then 'Baptist' when AT_OFFENDER_BOOKING.RELIGION_CODE IN ('COFE','COFI') Then 'Church of England' when AT_OFFENDER_BOOKING.RELIGION_CODE ='RC' Then 'Roman Catholic' when AT_OFFENDER_BOOKING.RELIGION_CODE='SIKH' then 'Sikh' when AT_OFFENDER_BOOKING.RELIGION_CODE='UNKN' then 'Not stated' when AT_OFFENDER_BOOKING.RELIGION_CODE='BUDD' then 'Buddhist' when AT_OFFENDER_BOOKING.RELIGION_CODE='HIND' then 'Hindu' when AT_OFFENDER_BOOKING.RELIGION_CODE='JEW' then 'Jewish' when AT_OFFENDER_BOOKING.RELIGION_CODE IN('BLAC','SHIA','SUNI','MOS') Then 'Muslim' when AT_OFFENDER_BOOKING.RELIGION_CODE IN('AGNO','ATHE','NIL') Then 'No religion' when AT_OFFENDER_BOOKING.RELIGION_CODE IN ('BAHA','DRU','HARE','JAIN','NONP','OTH','PAG','PARS','RAST','SATN','SCIE','SHIN','TAO','ZORO') Then 'Other' Else 'Other Christian denominations' End, Case When DT_LIFEFLAG.LIFE_SENTENCE_FLAG='Y' then 'Sentenced' when DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH='00/00/00' then 'Unsentenced' when DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH is null then 'Unsentenced' else 'Sentenced' End, case when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME)<1 then '<1 mth' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=1 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 3 then '1-3 mths' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=3 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 6 then '3-6 mths' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=6 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 12 then '6-12 mths' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=12 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 24 then '1-2 yrs' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=24 then '2 yrs+' END, Case When AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE IN ('DTO','DTO_YOI','DTOR_104','DTOR_105', 'DTO_ORA', 'REFER') Then 'Y' Else 'N' End, Case When AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE IN('EXSENT03','EXSENT08','LR_EPP') Then 'Y' Else 'N' End , Case When AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE IN ('SEC91','SEC91_03','LR_SEC91_ORA','SEC91_03_ORA') Then 'Y' Else 'N' End , Case When AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND = '1' Then 'Y' Else 'N' End, Case When AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE IN ('LR_LIFE','LR_S53','LR_S53_2','LR_YOI','LR_DPP','LR_EPP','LR_IPP') then 'Recall' when AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE IN ('HMP','HMPL') Then 'HMP' when AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE IN ('SEC90', 'SEC90_03') then 'Section 90' when AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE ='SEC53' Then 'Section 53 (1)' when AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE ='IPP' then 'ISPPCJ03' Else null End , --DTO Sentence Bands --get DTOs CASE When AT_OFFENDER_BOOKING.main_legal_status_code IN('DTO','DTO_YOI','DTOR_104','DTOR_105') then -- find DTO sentences up to and including 4 months and put into '4 Months' band Case When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =3 then '<=4 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =4 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=4 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =00 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) >0 then '<=4 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =0 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) >0 then '<=4 mths' --find DTO sentences between 4 months and 1 day and exactly 6 months and put into '6 Months' band When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =4 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) between 1 and 28 then '<=6 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =5 then '<=6 Months' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =6 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=6 Months' --find sentences between 6 months and 1 day and exactly 8 months and put into '8 Months' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =6 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) between 1 and 28 then '<=8 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =7 then '<=8 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =8 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=8 mths' --find DTO sentences between 8 months 1 day and exactly 10 months and put into '10 Months' band When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =9 then '<=10 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =8 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) between 1 and 28 then '<=10 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =10 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=10 mths' --find DTO sentences between 10 months and 1 day and exactly 12 months and put into '12 Months' band When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =10 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) between 1 and 28 then '<=12 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='01' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =0 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=12 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='01' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =11 then '<=12 mths' --find DTO sentences between 12 months and 1 day and exactly 18 months and put into '18 Months' band When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='01' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) between 1 and 6 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=18 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='01' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =0 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) between 0 and 28 then '<=18 mths' -- find DTO sentences between than 18 months and 1 day and exactly 24 months and put into '24 Months' band When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='02' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =0 and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) between 0 and 28 then '<=24 mths' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='02' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) =0 AND to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)) =0 then '<=24 mths' Else '24 mths+' End END, CASE When DT_LIFEFLAG.LIFE_SENTENCE_FLAG='Y' Then '5 yrs +' When substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) = '99' Then '5 yrs +' When DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH ='00/00/00' then 'No Sentence' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH is null then 'No Sentence' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<2 then 'Under 2 yrs' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2))<12 then 'Under 2 yrs' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) not in ('00','01') and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<3 then '2-3 yrs' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) not in ('00','01','02') and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<4 then '3-4 yrs' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) not in ('00','01','02','03') and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<5 then '4-5 yrs' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)) >=10 then '5 yrs +' Else 'Other' END, DT_ALL_LOCATIONS.LOCATION_DESC, AT_CELL.UNIT_4_SHORT_DESCRIPTION, AT_ESTABLISHMENT.ESTABLISHMENT_DESCRIPTION */ AS JUVENILE_INDETERMINATE_SENTE32), dataset_ AS (SELECT FROM dataset_base_)",
      "parameters": [
        {
          "index": 0,
          "name": "wing",
          "filterType": "autocomplete",
          "reportFieldType": "string",
          "display": "Wing (All for all)",
          "description": "@Prompt('Wing (All for all)','A','Cell\\Unit Description 1',multi,free,Not_Persistent,User:80)",
          "mandatory": "true",
          "referenceType": "wing"
        },
        {
          "index": 1,
          "name": "establishment_code",
          "filterType": "autocomplete",
          "reportFieldType": "string",
          "display": "Establishment",
          "description": "@Prompt('Establishment Code','A','Establishment\\Establishment Code',mono,free,Not_Persistent,User:70)",
          "mandatory": "true",
          "referenceType": "establishment"
        }
      ],
      "schema": {
        "field": []
      }
    },
    {
      "id": "3375368/DP1",
      "name": "MIS Load",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT BODIMIS.ETL_LOAD_LOG.BUSINESS_DATE FROM BODIMIS.ETL_LOAD_LOG WHERE (BODIMIS.ETL_LOAD_LOG.LOAD_ID = (SELECT MAX(LOAD_ID) FROM BODIMIS.ETL_LOAD_LOG WHERE NOT LOAD_END_DATETIME IS NULL))), dataset_ AS (SELECT BUSINESS_DATE FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "BUSINESS_DATE",
            "type": "date",
            "display": "Latest Business Date Available",
            "legacyId": "DP1.DO104dd",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP2",
      "name": "Status",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DT_LEGAL_STATUS.STATUS_CAT FROM (SELECT 'Sentenced' AS STATUS_CAT FROM DUAL UNION SELECT 'Recall' AS STATUS_CAT FROM DUAL UNION SELECT 'Convicted unsentenced' AS STATUS_CAT FROM DUAL UNION SELECT 'Remand' AS STATUS_CAT FROM DUAL UNION SELECT 'Civil prisoners' AS STATUS_CAT FROM DUAL UNION SELECT 'Detainee' AS STATUS_CAT FROM DUAL) DT_LEGAL_STATUS), dataset_ AS (SELECT STATUS_CAT FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "STATUS_CAT",
            "type": "string",
            "display": "IOP Legal Status Grouping",
            "legacyId": "DP2.DO107c6",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP3",
      "name": "Ethnicity",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT CASE WHEN AT_DIM_ETHNICITY_CODES.CODE = 'MERGE' THEN 'Code Missing' WHEN AT_DIM_ETHNICITY_CODES.CODE IS NULL THEN 'Code Missing' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'W8' THEN 'W3' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'O1' THEN 'A4' ELSE AT_DIM_ETHNICITY_CODES.CODE END AS ETHNIC_CODE, CASE WHEN AT_DIM_ETHNICITY_CODES.CODE = 'MERGE' THEN 'Code Missing' WHEN AT_DIM_ETHNICITY_CODES.CODE IS NULL THEN 'Code Missing' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'W8' THEN 'White: Gypsy or Irish Traveller' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'O1' THEN 'Asian/Asian British: Chinese' ELSE AT_DIM_ETHNICITY_CODES.DESCRIPTION END AS ETHNIC_DESCRIPTION, CASE WHEN AT_DIM_ETHNICITY_CODES.CODE = 'MERGE' THEN 'Not stated' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'NS' THEN 'Not stated' WHEN AT_DIM_ETHNICITY_CODES.CODE IS NULL THEN 'Not stated' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('O9', 'O2') THEN 'Other ethnic group' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'NS' THEN 'Not stated' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('B1', 'B2', 'B9') THEN 'Black or Black British' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('A1', 'A2', 'A3', 'A4', 'A9', 'O1') THEN 'Asian or Asian British' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('M1', 'M2', 'M3', 'M9') THEN 'Mixed' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('W1', 'W2', 'W3', 'W8', 'W9') THEN 'White' END AS IOP_ETHNIC_GROUPING FROM BODIMIS.DIM_ETHNICITY_CODES AT_DIM_ETHNICITY_CODES), dataset_ AS (SELECT ETHNIC_CODE, ETHNIC_DESCRIPTION, IOP_ETHNIC_GROUPING FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "ETHNIC_CODE",
            "type": "string",
            "display": "Ethnic Code",
            "legacyId": "DP3.DO1009b",
            "legacySqlClass": "column"
          },
          {
            "index": 1,
            "name": "ETHNIC_DESCRIPTION",
            "type": "string",
            "display": "Ethnic Description",
            "legacyId": "DP3.DO1009d",
            "legacySqlClass": "column"
          },
          {
            "index": 2,
            "name": "IOP_ETHNIC_GROUPING",
            "type": "string",
            "display": "IOP Ethnic Grouping",
            "legacyId": "DP3.DO107c0",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP4",
      "name": "Nationalities",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DT_NATIONALITY_GROUPING.NATIONALITY_GROUPING FROM (SELECT 'British' AS Nationality_Grouping FROM DUAL UNION SELECT 'Foreign nationals' AS Nationality_Grouping FROM DUAL UNION SELECT 'Not stated' AS Nationality_Grouping FROM DUAL) DT_NATIONALITY_GROUPING), dataset_ AS (SELECT NATIONALITY_GROUPING FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "NATIONALITY_GROUPING",
            "type": "string",
            "display": "IOP Nationality Grouping",
            "legacyId": "DP4.DO107c3",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP5",
      "name": "Religions",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DT_REL_CATEGORY.REL_CAT FROM (SELECT 'Baptist' AS REL_CAT FROM DUAL UNION SELECT 'Church of England' AS REL_CAT FROM DUAL UNION SELECT 'Roman Catholic' AS REL_CAT FROM DUAL UNION SELECT 'Other Christian denominations' AS REL_CAT FROM DUAL UNION SELECT 'Muslim' AS REL_CAT FROM DUAL UNION SELECT 'Sikh' AS REL_CAT FROM DUAL UNION SELECT 'Hindu' AS REL_CAT FROM DUAL UNION SELECT 'Buddhist' AS REL_CAT FROM DUAL UNION SELECT 'Jewish' AS REL_CAT FROM DUAL UNION SELECT 'Other' AS REL_CAT FROM DUAL UNION SELECT 'No religion' AS REL_CAT FROM DUAL UNION SELECT 'Not stated' AS REL_CAT FROM DUAL) DT_REL_CATEGORY), dataset_ AS (SELECT REL_CAT FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "REL_CAT",
            "type": "string",
            "display": "IOP Religion",
            "legacyId": "DP5.DO107c8",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP6",
      "name": "Length of Stay",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT CASE WHEN DT_LOS.LENGTH_OF_STAY = 'Less than 1 month' THEN '<1 mth' WHEN DT_LOS.LENGTH_OF_STAY = '1 month to 3 months' THEN '1-3 mths' WHEN DT_LOS.LENGTH_OF_STAY = '3 months to 6 months' THEN '3-6 mths' WHEN DT_LOS.LENGTH_OF_STAY = '6 months to 1 year' THEN '6-12 mths' WHEN DT_LOS.LENGTH_OF_STAY = '1 year to 2 years' THEN '1-2 yrs' ELSE '2 yrs+' END AS IOP_LENGTH_OF_STAY_ABBREV_GR34 FROM (SELECT 'Less than 1 month' AS LENGTH_OF_STAY FROM DUAL UNION SELECT '1 month to 3 months' AS LENGTH_OF_STAY FROM DUAL UNION SELECT '3 months to 6 months' AS LENGTH_OF_STAY FROM DUAL UNION SELECT '6 months to 1 year' AS LENGTH_OF_STAY FROM DUAL UNION SELECT '1 year to 2 years' AS LENGTH_OF_STAY FROM DUAL UNION SELECT '2 years to 4 years' AS LENGTH_OF_STAY FROM DUAL UNION SELECT '4 years or more' AS LENGTH_OF_STAY FROM DUAL) DT_LOS), dataset_ AS (SELECT IOP_LENGTH_OF_STAY_ABBREV_GR34 FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "IOP_LENGTH_OF_STAY_ABBREV_GR34",
            "type": "string",
            "display": "IOP Length of Stay Abbrev. Grouping",
            "legacyId": "DP6.DO107d3",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP7",
      "name": "JUV Age Banding",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DT_JUV_AGE_BANDING.AGE_BANDING FROM (SELECT '15 years' AS AGE_BANDING FROM DUAL UNION SELECT '16 years' AS AGE_BANDING FROM DUAL UNION SELECT '17 years' AS AGE_BANDING FROM DUAL UNION SELECT '18 years' AS AGE_BANDING FROM DUAL UNION SELECT 'Other' AS AGE_BANDING FROM DUAL) DT_JUV_AGE_BANDING), dataset_ AS (SELECT AGE_BANDING FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "AGE_BANDING",
            "type": "string",
            "display": "IOP Juvenile Age Grouping in Years",
            "legacyId": "DP7.DO107d1",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP8",
      "name": "Sentence Grp",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DT_IS_SENTENCED.SENTENCE_GROUPING FROM (SELECT 'Sentenced' AS SENTENCE_GROUPING FROM DUAL UNION SELECT 'Unsentenced' AS SENTENCE_GROUPING FROM DUAL) DT_IS_SENTENCED), dataset_ AS (SELECT SENTENCE_GROUPING FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "SENTENCE_GROUPING",
            "type": "string",
            "display": "IOP Is Sentenced?",
            "legacyId": "DP8.DO5d8",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP9",
      "name": "Ext Sentence Grp",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DT_EXT_SENT_BAND.EXT_SENT_BAND FROM ( --Juvenile HMP Inspectorate Extended Sentence Bands select 'Under 2 yrs' as EXT_SENT_BAND from DUAL UNION select '2-3 yrs' as EXT_SENT_BAND from DUAL UNION select '3-4 yrs' as EXT_SENT_BAND from DUAL UNION select '4-5 yrs' as EXT_SENT_BAND from DUAL UNION select '5 yrs +' as EXT_SENT_BAND from DUAL ) DT_EXT_SENT_BAND), dataset_ AS (SELECT FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": []
      }
    },
    {
      "id": "3375368/DPa",
      "name": "DTO Group",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DT_DTO_SENT_BAND.DTO_SENT_BAND FROM (SELECT '<=4 mths' AS DTO_SENT_BAND FROM Dual UNION SELECT '<=6 mths' AS DTO_SENT_BAND FROM Dual UNION SELECT '<=8 mths' AS DTO_SENT_BAND FROM Dual UNION SELECT '<=10 mths' AS DTO_SENT_BAND FROM Dual UNION SELECT '<=12 mths' AS DTO_SENT_BAND FROM Dual UNION SELECT '<=18 mths' AS DTO_SENT_BAND FROM Dual UNION SELECT '<=24 mths' AS DTO_SENT_BAND FROM Dual UNION SELECT '24 mths+' AS DTO_SENT_BAND FROM Dual) DT_DTO_SENT_BAND), dataset_ AS (SELECT DTO_SENT_BAND FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "DTO_SENT_BAND",
            "type": "string",
            "display": "IOP DTO Sentence Grouping",
            "legacyId": "DPa.DO5dc",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DPb",
      "name": "Indeterminate Grp",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DT_IND_SENT_BAND.IND_SENT_BAND FROM ( --Juvenile HMP Inspectorate Indeterminate Sentence Bands select 'Section 90' as IND_SENT_BAND from dual UNION select 'Section 53 (1)' as IND_SENT_BAND from dual UNION select 'ISPPCJ03' as IND_SENT_BAND from dual UNION select 'Recall' as IND_SENT_BAND from dual UNION select 'HMP' as IND_SENT_BAND from dual ) DT_IND_SENT_BAND), dataset_ AS (SELECT FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": []
      }
    }
  ],
  "policy": [
    {
      "id": "access",
      "type": "access",
      "rule": [
        {
          "effect": "permit",
          "condition": [
            {
              "match": [
                "${role}",
                "ROLE_PRISONS_REPORTING_USER"
              ]
            }
          ]
        }
      ]
    }
  ],
  "report": [
    {
      "id": "168803.RS",
      "name": "Summary",
      "classification": "OFFICIAL",
      "version": "1.0.0",
      "render": "HTML",
      "dataset": "3375368/DP0",
      "feature": [
        {
          "type": "print"
        }
      ],
      "specification": {
        "template": "list-tab",
        "field": [
          {
            "name": "$ref:DP0_DO10655",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          }
        ]
      }
    },
    {
      "id": "168731.RS",
      "name": "Core Detail",
      "classification": "OFFICIAL",
      "version": "1.0.0",
      "render": "HTML",
      "dataset": "3375368/DP0",
      "feature": [
        {
          "type": "print"
        }
      ],
      "specification": {
        "template": "list-tab",
        "field": [
          {
            "name": "$ref:DP0_DO104C2",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO10076",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO1007B",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO10080",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO107BE",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO10655",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "type": "enhanced",
      "error": "resolveEmbeddedVariables did not resolve all variables",
      "entityId": "kleHrb0AC8tQV04A0.8AFE.rcVQ",
      "entityType": "dpd"
    },
    {
      "type": "enhanced",
      "error": "dataset::fixSqlFormatting sql is not valid [Expected table name but got None. Line 1, Col: 44.\n  SELECT DT_EXT_SENT_BAND.EXT_SENT_BAND FROM \u001b[4m(\u001b[0m --Juvenile HMP Inspectorate Extended Sentence Bands select 'Under 2 yrs' as EXT_SENT_BAND from DUAL]",
      "entityId": "kleHrb0AC8tQV04A0.8AFE.rcVQ",
      "entityType": "dpd"
    },
    {
      "type": "enhanced",
      "error": "dataset::fixSqlFormatting sql is not valid [Expected table name but got None. Line 1, Col: 44.\n  SELECT DT_IND_SENT_BAND.IND_SENT_BAND FROM \u001b[4m(\u001b[0m --Juvenile HMP Inspectorate Indeterminate Sentence Bands select 'Section 90' as IND_SENT_BAND from ]",
      "entityId": "kleHrb0AC8tQV04A0.8AFE.rcVQ",
      "entityType": "dpd"
    },
    {
      "type": "schema",
      "error": "Dataset does not have any schema fields (comments -- in query)",
      "entityId": "3375368/DP0",
      "entityType": "dataset"
    },
    {
      "type": "schema",
      "error": "Dataset does not have any schema fields (comments -- in query)",
      "entityId": "3375368/DP9",
      "entityType": "dataset"
    },
    {
      "type": "schema",
      "error": "Dataset does not have any schema fields (comments -- in query)",
      "entityId": "3375368/DPb",
      "entityType": "dataset"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO10655 does not have corresponding dataset schema field",
      "entityId": "168803.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO104C2 does not have corresponding dataset schema field",
      "entityId": "168731.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO10076 does not have corresponding dataset schema field",
      "entityId": "168731.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO1007B does not have corresponding dataset schema field",
      "entityId": "168731.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO10080 does not have corresponding dataset schema field",
      "entityId": "168731.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO107BE does not have corresponding dataset schema field",
      "entityId": "168731.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO10655 does not have corresponding dataset schema field",
      "entityId": "168731.RS",
      "entityType": "variant"
    },
    {
      "type": "athenQuery",
      "error": "unable to generate test sql",
      "entityId": "3375368/DP0",
      "entityType": "dataset"
    }
  ]
}