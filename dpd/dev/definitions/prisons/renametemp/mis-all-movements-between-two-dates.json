{
  "id": "klQ7wE4ABqqGDkkA9TEAISgV_bQ",
  "name": "MIS All movements Between two Dates",
  "metadata": {
    "version": "1.0.0",
    "tags": [
      "BSI0003"
    ]
  },
  "description": "A List of transfers in and the establishment they arrived from including their sentence length and cell location. Sorted by between two dates<br/>BSI0003 -",
  "datasource": [
    {
      "id": "bodmis",
      "name": "BODMIS",
      "database": "DIGITAL_PRISON_REPORTING",
      "catalog": "bodmis"
    }
  ],
  "dataset": [
    {
      "id": "3375368/DP0",
      "name": "Query 1",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT AT_OFFENDER_BOOKING.OFFENDER_ID_DISPLAY, AT_OFFENDER_BOOKING.SURNAME, AT_CELL.UNIT_4_DESCRIPTION, case When DT_LIFEFLAG.life_sentence_flag='Y' Then 'Life' when DT_LIFEFLAG.life_sentence_flag is null then decode(to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)),null,null, to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))|| '  ') || decode( to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)), null,null , to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2))|| '  ' ) || decode(to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2)), null,null , to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,7,2))|| '  ' ) else '' END, AT_FACT_MOV_EXT.TYPE, AT_ESTABLISHMENT_EXT_MOV_FROM.ESTABLISHMENT_DESCRIPTION , AT_DIM_DATE_EXT_MOV.DAY_DATE, DT_OFFENDER_ADDRESSES.POSTAL_CODE, DT_OFFENDER_ADDRESSES.CITY_DESC, DT_OFFENDER_ADDRESSES.COUNTY_DESC FROM BODIMIS.DIM_OFFENDER_BOOKING AT_OFFENDER_BOOKING, BODIMIS.DIM_CELL AT_CELL, ( SELECT BODIMIS.FACT_OFFENDER_SENTENCE.OFFENDER_BOOKING_SK, BODIMIS.FACT_OFFENDER_SENTENCE.EFFECTIVE_SENTENCE_LENGTH FROM BODIMIS.FACT_OFFENDER_SENTENCE WHERE ( BODIMIS.FACT_OFFENDER_SENTENCE.SENTENCE_CURRENT_FLAG='Y' ) ) DT_CURREFFSENLEN, (  SELECT distinct BODIMIS.FACT_CASE_SENTENCE_TERM.offender_booking_sk, BODIMIS.FACT_CASE_SENTENCE_TERM.LIFE_SENTENCE_FLAG FROM BODIMIS.FACT_CASE_SENTENCE_TERM, BODIMIS.FACT_CASE_SENTENCE, BODIMIS.DIM_SENTENCE_STATUS dss WHERE ( BODIMIS.FACT_CASE_SENTENCE.SENTENCE_STATUS_SK=dss.sentence_status_sk) AND dss.sentence_status='Active' AND ( BODIMIS.FACT_CASE_SENTENCE.OFFENDER_BOOKING_SK=BODIMIS.FACT_CASE_SENTENCE_TERM.OFFENDER_BOOKING_SK ) AND ( BODIMIS.FACT_CASE_SENTENCE.SENTENCE_SEQ_NK=BODIMIS.FACT_CASE_SENTENCE_TERM.SENTENCE_SEQ_NK ) AND ( BODIMIS.FACT_CASE_SENTENCE.COURT_CASE_SK=BODIMIS.FACT_CASE_SENTENCE_TERM.COURT_CASE_SK ) and BODIMIS.FACT_CASE_SENTENCE_TERM.LIFE_SENTENCE_FLAG='Y' ) DT_LIFEFLAG, BODIMIS.FACT_MOVEMENT_EXTERNAL AT_FACT_MOV_EXT, BODIMIS.DIM_ESTABLISHMENT AT_ESTABLISHMENT_EXT_MOV_FROM, BODIMIS.DIM_DATE AT_DIM_DATE_EXT_MOV, ( select ROW_NUMBER() OVER (PARTITION BY ss.OWNER_ID ORDER BY PRIMARY_FLAG desc, ss.address_active_flag desc, ss.USAGE_ACTIVE_FLAG desc, ss.usages_dttm DESC nulls last) row_seq_filter, ss.* from ( select * from ( select AT_DIM_ADDRESSES.OWNER_ID, AT_DIM_ADDRESS_USAGES.ADDRESS_ID_NK, AT_DIM_ADDRESS_USAGES.ADDRESS_USAGE, AT_DIM_ADDRESS_USAGES.ADDR_USAGE_DESCRIPTION, AT_DIM_ADDRESS_USAGES.ACTIVE_FLAG as USAGE_ACTIVE_FLAG, AT_DIM_ADDRESSES.flat, AT_DIM_ADDRESSES.premise, AT_DIM_ADDRESSES.Street, AT_DIM_ADDRESSES.locality, AT_DIM_ADDRESSES.city_code, AT_DIM_ADDRESSES.city_desc, AT_DIM_ADDRESSES.county_code, AT_DIM_ADDRESSES.county_desc, AT_DIM_ADDRESSES.postal_code, AT_DIM_ADDRESSES.COUNTRY_CODE, AT_DIM_ADDRESSES.country_desc, AT_DIM_ADDRESSES.HOME_TEL_NO, AT_DIM_ADDRESSES.HOME_EXT_NO, AT_DIM_ADDRESSES.NO_FIXED_ADDRESS_FLAG, AT_DIM_ADDRESSES.establishment_sk, AT_DIM_ADDRESSES.PRIMARY_FLAG, AT_DIM_ADDRESSES.active_flag as address_active_flag, AT_DIM_ADDRESS_USAGES.CREATE_DATETIME, AT_DIM_ADDRESS_USAGES.MODIFY_DATETIME, COALESCE(AT_DIM_ADDRESS_USAGES.modify_datetime, AT_DIM_ADDRESS_USAGES.create_datetime) as usages_dttm from BODIMIS.DIM_ADDRESS_USAGES AT_DIM_ADDRESS_USAGES inner join BODIMIS.dim_addresses AT_DIM_ADDRESSES on AT_DIM_ADDRESS_USAGES.address_id_nk = AT_DIM_ADDRESSES.address_id_nk and AT_DIM_ADDRESSES.owner_class='OFF'  ) Addr_usages --where Addr_usages.usages_dttm is not null ) ss ) DT_OFFENDER_ADDRESSES, BODISTAGING.REF_OFFENDERS AT_BODISTAG_REF_OFFENDERS WHERE ( AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK=DT_CURREFFSENLEN.OFFENDER_BOOKING_SK(+) ) AND ( AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK=DT_LIFEFLAG.OFFENDER_BOOKING_SK(+) ) AND ( AT_FACT_MOV_EXT.OFFENDER_BOOKING_SK(+)=AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK ) AND ( AT_DIM_DATE_EXT_MOV.DATE_SK=AT_FACT_MOV_EXT.DATE_SK ) AND ( AT_ESTABLISHMENT_EXT_MOV_FROM.ESTABLISHMENT_SK(+)=AT_FACT_MOV_EXT.FROM_LOCATION_SK ) AND ( AT_CELL.UNIT_4_SK=AT_OFFENDER_BOOKING.LIVING_UNIT_SK ) AND ( AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK IN (SELECT CSL.OFFENDER_BOOKING_SK FROM BODIMIS.DIM_STAFF_ACCESSIBLE_CASELOAD SAC, BODIMIS.DIM_CASELOAD_SECURITY_LIST CSL WHERE SAC.CASELOAD_ID=CSL.CASELOAD_CODE AND SAC.USERNAME = UPPER((SELECT username FROM context_ /*= #Variable('BOUSER') */ )) AND CSL.ENDYEAR >= to_char(sysdate,'YYYY')-6 ) ) AND ( AT_OFFENDER_BOOKING.OFFENDER_ID=AT_BODISTAG_REF_OFFENDERS.OFFENDER_ID(+) ) AND ( AT_BODISTAG_REF_OFFENDERS.ROOT_OFFENDER_ID=DT_OFFENDER_ADDRESSES.OWNER_ID(+) ) AND ( AT_DIM_DATE_EXT_MOV.DAY_DATE BETWEEN (SELECT UNKNOWN_PARAMETER FROM prompt_ /*= #prompt('Enter value(s) for Movement Date:','D',,Mono,Free,Not_Persistent,,User:0) */ ) AND (SELECT END_DATE FROM prompt_ /*= #prompt('Enter Movement Date (End):','D',,Mono,Free,Not_Persistent,,User:1) */ ) AND ( DT_OFFENDER_ADDRESSES.ROW_SEQ_FILTER = 1 OR DT_OFFENDER_ADDRESSES.ROW_SEQ_FILTER Is Null ) AND AT_FACT_MOV_EXT.TYPE NOT IN ( 'Court','Temporary Absence / Home Leave' ) )), dataset_ AS (SELECT FROM dataset_base_)",
      "parameters": [
        {
          "index": 0,
          "name": "unknown_parameter",
          "filterType": "text",
          "reportFieldType": "string",
          "display": "Enter value(s) for Movement Date:",
          "description": "@prompt('Enter value(s) for Movement Date:','D',,Mono,Free,Not_Persistent,,User:0)",
          "mandatory": "true"
        },
        {
          "index": 1,
          "name": "end_date",
          "filterType": "date",
          "reportFieldType": "date",
          "display": "Enter Movement Date (End):",
          "description": "@prompt('Enter Movement Date (End):','D',,Mono,Free,Not_Persistent,,User:1)",
          "mandatory": "true"
        }
      ],
      "schema": {
        "field": []
      }
    }
  ],
  "policy": [
    {
      "id": "access",
      "type": "access",
      "rule": [
        {
          "effect": "permit",
          "condition": [
            {
              "match": [
                "${role}",
                "ROLE_PRISONS_REPORTING_USER"
              ]
            }
          ]
        }
      ]
    }
  ],
  "report": [
    {
      "id": "2.RS",
      "name": "Transfers",
      "classification": "OFFICIAL",
      "version": "1.0.0",
      "render": "HTML",
      "dataset": "3375368/DP0",
      "feature": [
        {
          "type": "print"
        }
      ],
      "specification": {
        "template": "list",
        "field": [
          {
            "name": "$ref:DP0_DO10076",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO103EC",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO1007B",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO10136",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO146",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO1015D",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO10781",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO1094E",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO1094B",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP0_DO1094C",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "type": "enhanced",
      "error": "dataset::fixSqlFormatting sql is not valid [Expecting ). Line 1, Col: 3455.\n  ESS_USAGES.address_id_nk = AT_DIM_ADDRESSES.address_id_nk and AT_DIM_ADDRESSES.owner_class='OFF'  ) \u001b[4mAddr_usages\u001b[0m --where Addr_usages.usages_dttm is not null ) ss ) DT_OFFENDER_ADDRESSES, BODISTAGING.REF_OFFENDERS]",
      "entityId": "klQ7wE4ABqqGDkkA9TEAISgV_bQ",
      "entityType": "dpd"
    },
    {
      "type": "schema",
      "error": "Dataset does not have any schema fields (comments -- in query)",
      "entityId": "3375368/DP0",
      "entityType": "dataset"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO10076 does not have corresponding dataset schema field",
      "entityId": "2.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO103EC does not have corresponding dataset schema field",
      "entityId": "2.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO1007B does not have corresponding dataset schema field",
      "entityId": "2.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO10136 does not have corresponding dataset schema field",
      "entityId": "2.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO146 does not have corresponding dataset schema field",
      "entityId": "2.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO1015D does not have corresponding dataset schema field",
      "entityId": "2.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO10781 does not have corresponding dataset schema field",
      "entityId": "2.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO1094E does not have corresponding dataset schema field",
      "entityId": "2.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO1094B does not have corresponding dataset schema field",
      "entityId": "2.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP0_DO1094C does not have corresponding dataset schema field",
      "entityId": "2.RS",
      "entityType": "variant"
    },
    {
      "type": "athenQuery",
      "error": "unable to generate test sql",
      "entityId": "3375368/DP0",
      "entityType": "dataset"
    }
  ]
}