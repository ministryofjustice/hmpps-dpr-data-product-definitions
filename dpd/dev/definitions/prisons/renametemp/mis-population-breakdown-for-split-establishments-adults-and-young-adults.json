{
  "id": "kleHq84ACgZZV04A3f8AFE.rcVQ",
  "name": "MIS Population Breakdown for Split Establishments Adults and Young Adults",
  "metadata": {
    "version": "1.0.0",
    "tags": [
      "IOP0003 v00.00.09"
    ]
  },
  "description": "This HM Inspectorate of Prisons report provides the population breakdown for adults and young adults within an establishment which has a split population in different wings e.g. the establishment is both an HMP and YOI and houses adults in one wing and young people/juveniles in another wing. This report can also be used for split establishments who house adult men and women. The report prompts for one or more wing(s) to allow you to differentiate between the different populations within your establishment. <br/>IOP0003 v00.00.09 Last Modified:12/10/2017",
  "datasource": [
    {
      "id": "bodmis",
      "name": "BODMIS",
      "database": "DIGITAL_PRISON_REPORTING",
      "catalog": "bodmis"
    }
  ],
  "dataset": [
    {
      "id": "3375368/DP4",
      "name": "Prisoners",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT AT_OFFENDER_BOOKING.OFFENDER_ID_DISPLAY, AT_OFFENDER_BOOKING.SURNAME, AT_OFFENDER_BOOKING.IN_OUT, floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12), CASE when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) < 18 then 'Juvenile' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) between 18 and 20 then '18 - 20 yr olds' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) >= 21 then '21 and over' END, CASE when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) < 21 then 'Under 21' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) between 21 and 29 then '21 years to 29 years' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) between 30 and 39 then '30 years to 39 years' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) between 40 and 49 then '40 years to 49 years' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) between 50 and 59 then '50 years to 59 years' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) between 60 and 69 then '60 years to 69 years' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) >= 70 then '70 plus years' END , CASE WHEN AT_DIM_ETHNICITY_CODES.CODE='MERGE' Then 'Code Missing' WHEN AT_DIM_ETHNICITY_CODES.CODE IS NULL Then 'Code Missing' when AT_DIM_ETHNICITY_CODES.CODE='W8' then 'White: Gypsy or Irish Traveller' when AT_DIM_ETHNICITY_CODES.CODE='O1' then 'Asian/Asian British: Chinese' ELSE AT_DIM_ETHNICITY_CODES.DESCRIPTION end, Case When AT_DIM_ETHNICITY_CODES.CODE='MERGE' Then 'Not stated' When AT_DIM_ETHNICITY_CODES.CODE='NS' then 'Not stated' When AT_DIM_ETHNICITY_CODES.CODE IS NULL Then 'Not stated' When AT_DIM_ETHNICITY_CODES.CODE IN('O9','O2') Then 'Other ethnic group' When AT_DIM_ETHNICITY_CODES.CODE ='NS' then 'Not stated' When AT_DIM_ETHNICITY_CODES.CODE IN('B1','B2','B9') then 'Black or Black British' When AT_DIM_ETHNICITY_CODES.CODE IN('A1','A2','A3','A4','A9','O1') then 'Asian or Asian British' When AT_DIM_ETHNICITY_CODES.CODE IN('M1','M2','M3','M9') then 'Mixed' When AT_DIM_ETHNICITY_CODES.CODE IN('W1','W2','W3','W8','W9') then 'White' End , CASE WHEN AT_CURRENT_SECURITY_CATEGORY.CURRENT_SEC_CAT_LEVEL IS NULL THEN 'Unclassified' ELSE AT_CURRENT_SECURITY_CATEGORY.CURRENT_SEC_CAT_LEVEL END, Case when AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE In ('14FTR_ORA','14FTRHDC_ORA','CUR_ORA','FTR/08','FTR_HDC','FTR_HDC_ORA','FTR_ORA','FTR_SCH15','FTRSCH15_ORA','HDR_ORA','LR','LR_ALP','LR_ALP_LASPO','LR_DLP','LR_DPP','LR_EPP','LR_ES','LR_HDC','LR_IPP','LR_LASPO_AR','LR_LASPO_DR','LR_LIFE','LR_MLP','LR_ORA','LR_SEC236A','LR_SEC91_ORA','LR_YOI','LR_YOI_ORA') then 'Recall' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND = '0' then 'Dead' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND = '1' then 'Indeterminate Sentence' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('2','3') then 'Sentenced' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('4','5','6','7') then 'Convicted Unsentenced' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('9','10') or AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE = 'CIV_RMD' then 'Civil Prisoner' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('8','11') then 'Immigration Detainee' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('12','13','14') then 'Remand' when AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE = 'UNKNOWN' then 'Unknown' Else 'Other' End , Case when AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE in ('IPP','LR_IPP') then 'Y' else 'N' End, DT_MAPPA.MAPPA_ALERT, case when AT_OFFENDER_BOOKING.NATIONALITY_CODE='BRIT' then 'British' when AT_OFFENDER_BOOKING.NATIONALITY_CODE IN( 'UNKNOWN','REF','STATE') then 'Not stated' when AT_OFFENDER_BOOKING.NATIONALITY_CODE is null then 'Not stated' else 'Foreign nationals' END, Case when AT_OFFENDER_BOOKING.RELIGION_CODE is null then 'Not stated' when AT_OFFENDER_BOOKING.RELIGION_CODE='BAPT' then 'Baptist' when AT_OFFENDER_BOOKING.RELIGION_CODE IN ('COFE','COFI') Then 'Church of England' when AT_OFFENDER_BOOKING.RELIGION_CODE ='RC' Then 'Roman Catholic' when AT_OFFENDER_BOOKING.RELIGION_CODE='SIKH' then 'Sikh' when AT_OFFENDER_BOOKING.RELIGION_CODE='UNKN' then 'Not stated' when AT_OFFENDER_BOOKING.RELIGION_CODE='BUDD' then 'Buddhist' when AT_OFFENDER_BOOKING.RELIGION_CODE='HIND' then 'Hindu' when AT_OFFENDER_BOOKING.RELIGION_CODE='JEW' then 'Jewish' when AT_OFFENDER_BOOKING.RELIGION_CODE IN('BLAC','SHIA','SUNI','MOS') Then 'Muslim' when AT_OFFENDER_BOOKING.RELIGION_CODE IN('AGNO','ATHE','NIL') Then 'No religion' when AT_OFFENDER_BOOKING.RELIGION_CODE IN ('BAHA','DRU','HARE','JAIN','NONP','OTH','PAG','PARS','RAST','SATN','SCIE','SHIN','TAO','ZORO') Then 'Other' Else 'Other Christian denominations' End, case when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME)<1 then 'Less than 1 month' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=1 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 3 then '1 month to 3 months' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=3 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 6 then '3 months to 6 months' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=6 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 12 then '6 months to 1 year' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=12 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 24 then '1 year to 2 years' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=24 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 48 then '2 years to 4 years' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=48 then '4 years or more' End, DT_ADMISSION.MOVEMENT_TIME, AT_CELL.UNIT_4_SHORT_DESCRIPTION, AT_ESTABLISHMENT.ESTABLISHMENT_DESCRIPTION, DT_ALL_LOCATIONS.LOCATION_DESC, CASE When DT_LIFEFLAG.LIFE_SENTENCE_FLAG='Y' Then 'Life' When substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) = '99' Then 'Life' When DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH ='00/00/00' then 'No sentence' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) <6 then 'Less than 6 Months' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2))<12 then '6 Months to less than 1 Year' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)<>'00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<2 then '1 Year to less than 2 Years' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) not in ('00','01') and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<3 then '2 Years to less than 3 Years' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) not in ('00','01','02') and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<4 then '3 Years to less than 4 Years' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) not in ('00','01','02','03') and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<10 then '4 Years to less than 10 Years' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)) >=10 then '10 Years or more and Less than Life' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH is null then 'No sentence' Else 'Not Categorised' END, Case When DT_LIFEFLAG.LIFE_SENTENCE_FLAG='Y' then 'Sentenced' when DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH='00/00/00' then 'Unsentenced' when DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH is null then 'Unsentenced' else 'Sentenced' End, DT_CURRENT_KEY_DATES.SED, trunc(sysdate), COUNT(distinct(AT_OFFENDER_BOOKING.OFFENDER_ID_DISPLAY)), AT_OFFENDER_BOOKING.FIRST_NAME FROM ( select establishment_sk as LOCATION_SK,establishment_description as LOCATION_DESC,'Establishment' as LOCATION_TYPE from bodimis.dim_establishment UNION select court_sk, court_description, 'Court' from bodimis.dim_court UNION select probation_office_sk, prob_office_description, 'Probation Office' from bodimis.dim_probation_office UNION select outside_location_sk,outside_location_description, 'Outside Location' from bodimis.dim_outside_location ) DT_ALL_LOCATIONS, ( Select AT_FACT_OFFENDER_SENTENCE.OFFENDER_BOOKING_SK as OFFENDER_BOOKING_SK, case when AT_APD_DATE.DAY_DATE <> '31/12/9000' Then AT_APD_DATE.DAY_DATE end as CURR_APD_DATE, case when AT_ARD_DATE.DAY_DATE <> '31/12/9000' Then AT_ARD_DATE.DAY_DATE end as CURR_ARD_DATE, case when AT_CRD_DATE.DAY_DATE <> '31/12/9000' Then AT_CRD_DATE.DAY_DATE end as CURR_CRD_DATE, case when AT_ETD_DATE.DAY_DATE <> '31/12/9000' Then AT_ETD_DATE.DAY_DATE end as CURR_ETD_DATE, case when AT_HDCAD_DATE.DAY_DATE <> '31/12/9000' Then AT_HDCAD_DATE.DAY_DATE end as CURR_HDCAD_DATE, case when AT_HDCED_DATE.DAY_DATE <> '31/12/9000' Then AT_HDCED_DATE.DAY_DATE end as CURR_HDCED_DATE, case when AT_PED_DATE.DAY_DATE <> '31/12/9000' Then AT_PED_DATE.DAY_DATE end as CURR_PED_DATE, case when AT_LED_DATE.DAY_DATE <> '31/12/9000' Then AT_LED_DATE.DAY_DATE end as CURR_LED_DATE, case when AT_LTD_DATE.DAY_DATE <> '31/12/9000' Then AT_LTD_DATE.DAY_DATE end as CURR_LTD_DATE, case when AT_MTD_DATE.DAY_DATE <> '31/12/9000' Then AT_MTD_DATE.DAY_DATE end as CURR_MTD_DATE, case when AT_NPD_DATE.DAY_DATE <> '31/12/9000' Then AT_NPD_DATE.DAY_DATE end as CURR_NPD_DATE, case when AT_PRRD_DATE.DAY_DATE <> '31/12/9000' Then AT_PRRD_DATE.DAY_DATE end as CURR_PRRD_DATE, case when AT_RELEASE_DATE.DAY_DATE <> '31/12/9000' Then AT_RELEASE_DATE.DAY_DATE end as CURR_RELEASE_DATE, case when AT_SED_DATE.DAY_DATE <> '31/12/9000' Then AT_SED_DATE.DAY_DATE end as SED, MIN(case when AT_SENT_START_DATE.DAY_DATE <> '31/12/9000' Then AT_SENT_START_DATE.DAY_DATE end) as SSD, case when AT_TARIFF_DATE.DAY_DATE <> '31/12/9000' Then AT_TARIFF_DATE.DAY_DATE end as TARIFF, case when AT_ROTL_DATE.DAY_DATE <> '31/12/9000' Then AT_ROTL_DATE.DAY_DATE end as CURR_ROTL_DATE, case when AT_ERSED_DATE.DAY_DATE <> '31/12/9000' Then AT_ERSED_DATE.DAY_DATE end as CURR_ERSED_DATE, case when AT_TERSED_DATE.DAY_DATE <> '31/12/9000' Then AT_TERSED_DATE.DAY_DATE end as CURR_TERSED_DATE, at_fact_offender_sentence.tused_date_sk as tused_sk, nullif(td.day_date, to_date('31/12/9000', 'DD/MM/YYYY')) as tused From BODIMIS.FACT_CASE_SENTENCE AT_FACT_SENTENCE, BODIMIS.FACT_OFFENDER_SENTENCE AT_FACT_OFFENDER_SENTENCE, BODIMIS.DIM_DATE AT_ARD_DATE, BODIMIS.DIM_DATE AT_APD_DATE, BODIMIS.DIM_DATE AT_CRD_DATE, BODIMIS.DIM_DATE AT_ETD_DATE, BODIMIS.DIM_DATE AT_HDCAD_DATE, BODIMIS.DIM_DATE AT_HDCED_DATE, BODIMIS.DIM_DATE AT_PED_DATE, BODIMIS.DIM_DATE AT_LED_DATE, BODIMIS.DIM_DATE AT_LTD_DATE, BODIMIS.DIM_DATE AT_MTD_DATE, BODIMIS.DIM_DATE AT_NPD_DATE, BODIMIS.DIM_DATE AT_PRRD_DATE, BODIMIS.DIM_DATE AT_RELEASE_DATE, BODIMIS.DIM_DATE AT_SED_DATE, BODIMIS.DIM_DATE AT_SENT_START_DATE, BODIMIS.DIM_DATE AT_TARIFF_DATE, BODIMIS.DIM_DATE AT_ROTL_DATE, BODIMIS.DIM_DATE AT_ERSED_DATE, BODIMIS.DIM_DATE AT_TERSED_DATE, bodimis.dim_date td where AT_FACT_OFFENDER_SENTENCE.OFFENDER_BOOKING_SK=AT_FACT_SENTENCE.OFFENDER_BOOKING_SK(+) and AT_FACT_OFFENDER_SENTENCE.ARD_DATE_SK=AT_ARD_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.APD_DATE_SK=AT_APD_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.CRD_DATE_SK=AT_CRD_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.ETD_DATE_SK=AT_ETD_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.HDCAD_DATE_SK=AT_HDCAD_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.HDCED_DATE_SK=AT_HDCED_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.PED_DATE_SK=AT_PED_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.LED_DATE_SK=AT_LED_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.LTD_DATE_SK=AT_LTD_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.MTD_DATE_SK=AT_MTD_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.NPD_DATE_SK= AT_NPD_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.PED_DATE_SK=AT_PED_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.PRRD_DATE_SK=AT_PRRD_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.RELEASE_CALCULATED_DATE_SK=AT_RELEASE_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.SED_DATE_SK=AT_SED_DATE.DATE_SK(+) and AT_FACT_SENTENCE.SENTENCE_START_DATE_SK=AT_SENT_START_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.TARIFF_DATE_SK=AT_TARIFF_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.ROTL_DATE_SK=AT_ROTL_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.ERSED_DATE_SK=AT_ERSED_DATE.DATE_SK(+) and AT_FACT_OFFENDER_SENTENCE.TERSED_DATE_SK=AT_TERSED_DATE.DATE_SK(+) and at_fact_offender_sentence.tused_date_sk = td.date_sk(+) and AT_FACT_OFFENDER_SENTENCE.SENTENCE_CURRENT_FLAG='Y' GROUP BY AT_FACT_OFFENDER_SENTENCE.OFFENDER_BOOKING_SK, case when AT_APD_DATE.DAY_DATE <> '31/12/9000' Then AT_APD_DATE.DAY_DATE end, case when AT_ARD_DATE.DAY_DATE <> '31/12/9000' Then AT_ARD_DATE.DAY_DATE end, case when AT_CRD_DATE.DAY_DATE <> '31/12/9000' Then AT_CRD_DATE.DAY_DATE end, case when AT_ETD_DATE.DAY_DATE <> '31/12/9000' Then AT_ETD_DATE.DAY_DATE end, case when AT_HDCAD_DATE.DAY_DATE <> '31/12/9000' Then AT_HDCAD_DATE.DAY_DATE end, case when AT_HDCED_DATE.DAY_DATE <> '31/12/9000' Then AT_HDCED_DATE.DAY_DATE end, case when AT_PED_DATE.DAY_DATE <> '31/12/9000' Then AT_PED_DATE.DAY_DATE end, case when AT_LED_DATE.DAY_DATE <> '31/12/9000' Then AT_LED_DATE.DAY_DATE end, case when AT_LTD_DATE.DAY_DATE <> '31/12/9000' Then AT_LTD_DATE.DAY_DATE end, case when AT_MTD_DATE.DAY_DATE <> '31/12/9000' Then AT_MTD_DATE.DAY_DATE end, case when AT_NPD_DATE.DAY_DATE <> '31/12/9000' Then AT_NPD_DATE.DAY_DATE end, case when AT_PRRD_DATE.DAY_DATE <> '31/12/9000' Then AT_PRRD_DATE.DAY_DATE end, case when AT_RELEASE_DATE.DAY_DATE <> '31/12/9000' Then AT_RELEASE_DATE.DAY_DATE end, case when at_sed_date.day_date <> '31/12/9000' then at_sed_date.day_date end, case when AT_TARIFF_DATE.DAY_DATE <> '31/12/9000' Then AT_TARIFF_DATE.DAY_DATE END, case when AT_ROTL_DATE.DAY_DATE <> '31/12/9000' Then AT_ROTL_DATE.DAY_DATE END, case when AT_ERSED_DATE.DAY_DATE <> '31/12/9000' Then AT_ERSED_DATE.DAY_DATE END, case when AT_TERSED_DATE.DAY_DATE <> '31/12/9000' Then AT_TERSED_DATE.DAY_DATE END, at_fact_offender_sentence.tused_date_sk, td.day_date ) DT_CURRENT_KEY_DATES, ( Select ob.offender_id_display, fme.offender_booking_sk, est.establishment_code_nk, fme.to_location_sk, fme.from_location_sk , fme.from_location_type, max(fme.MOVEMENT_SEQ ) as MOVEMENT_SEQ, max(d.day_date) as MOVEMENT_TIME, trunc(ETL.LOAD_END_DATETIME) as LOAD_DATE From BODIMIS.FACT_MOVEMENT_EXTERNAL fme, BODIMIS.DIM_OFFENDER_BOOKING ob, BODIMIS.DIM_ESTABLISHMENT est, BODIMIS.ETL_LOAD_LOG ETL, BODIMIS.DIM_DATE d Where ob.ESTABLISHMENT_SK=est.ESTABLISHMENT_SK and d.date_sk=fme.date_sk and fme.offender_booking_sk=ob.offender_booking_sk and ob.active_status IN('Active In','Active Out') And ob.MIS_CURRENT_RECORD_IND = 'Y' and ob.ACTIVE_FLAG = 'Y' and ETL.LOAD_ID=(select max(LOAD_ID) from BODIMIS.ETL_LOAD_LOG WHERE LOAD_END_DATETIME IS NOT NULL) And ob.ESTABLISHMENT_SK=fme.to_location_sk and fme.movement_seq= (select max(fme2.movement_seq ) from BODIMIS.FACT_MOVEMENT_EXTERNAL fme2 where fme.offender_booking_sk=fme2.offender_booking_sk and fme2.direction_code='IN' And fme2.TYPE='Admission' And fme2.To_location_type='Establishment' and fme2.reason_code <> 'R') GROUP BY ob.offender_id_display, fme.offender_booking_sk,est.establishment_code_nk,fme.to_location_sk,fme.from_location_sk,fme.from_location_type,ETL.LOAD_END_DATETIME ) DT_ADMISSION, BODIMIS.DIM_ESTABLISHMENT AT_ESTABLISHMENT, BODIMIS.DIM_ETHNICITY_CODES AT_DIM_ETHNICITY_CODES, BODIMIS.DIM_OFFENDER_BOOKING AT_OFFENDER_BOOKING, BODIMIS.DIM_DATE AT_DOB, BODIMIS.DIM_OFFENDER_ASSESSMENT AT_CURRENT_SECURITY_CATEGORY, ( SELECT DISTINCT AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK, CASE when AT_ALERT.ALERT_CODE_NK in ('P0','P1','P2','P3','P4') THEN 'Y' ELSE NULL END AS MAPPA_ALERT FROM BODIMIS.DIM_OFFENDER_BOOKING AT_OFFENDER_BOOKING, BODIMIS.FACT_OFFENDER_ALERT AT_OFFENDER_ALERT, BODIMIS.DIM_ALERT AT_ALERT WHERE AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK=AT_OFFENDER_ALERT.OFFENDER_BOOKING_SK AND AT_ALERT.ALERT_SK=AT_OFFENDER_ALERT.ALERT_SK AND AT_ALERT.ALERT_ACTIVE_FLAG='Y' AND AT_OFFENDER_ALERT.ALERT_STATUS='ACTIVE' AND AT_ALERT.ALERT_CODE_NK IN ('P0','P1','P2','P3','P4') ) DT_MAPPA, BODIMIS.DIM_CELL AT_CELL, ( SELECT BODIMIS.FACT_OFFENDER_SENTENCE.OFFENDER_BOOKING_SK, BODIMIS.FACT_OFFENDER_SENTENCE.EFFECTIVE_SENTENCE_LENGTH FROM BODIMIS.FACT_OFFENDER_SENTENCE WHERE ( BODIMIS.FACT_OFFENDER_SENTENCE.SENTENCE_CURRENT_FLAG='Y' ) ) DT_CURREFFSENLEN, (  SELECT distinct BODIMIS.FACT_CASE_SENTENCE_TERM.offender_booking_sk, BODIMIS.FACT_CASE_SENTENCE_TERM.LIFE_SENTENCE_FLAG FROM BODIMIS.FACT_CASE_SENTENCE_TERM, BODIMIS.FACT_CASE_SENTENCE, BODIMIS.DIM_SENTENCE_STATUS dss WHERE ( BODIMIS.FACT_CASE_SENTENCE.SENTENCE_STATUS_SK=dss.sentence_status_sk) AND dss.sentence_status='Active' AND ( BODIMIS.FACT_CASE_SENTENCE.OFFENDER_BOOKING_SK=BODIMIS.FACT_CASE_SENTENCE_TERM.OFFENDER_BOOKING_SK ) AND ( BODIMIS.FACT_CASE_SENTENCE.SENTENCE_SEQ_NK=BODIMIS.FACT_CASE_SENTENCE_TERM.SENTENCE_SEQ_NK ) AND ( BODIMIS.FACT_CASE_SENTENCE.COURT_CASE_SK=BODIMIS.FACT_CASE_SENTENCE_TERM.COURT_CASE_SK ) and BODIMIS.FACT_CASE_SENTENCE_TERM.LIFE_SENTENCE_FLAG='Y' ) DT_LIFEFLAG WHERE ( AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK=DT_CURRENT_KEY_DATES.OFFENDER_BOOKING_SK(+) ) AND ( AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK=DT_CURREFFSENLEN.OFFENDER_BOOKING_SK(+) ) AND ( AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK=DT_LIFEFLAG.OFFENDER_BOOKING_SK(+) ) AND ( AT_OFFENDER_BOOKING.BIRTH_DATE_SK=AT_DOB.DATE_SK ) AND ( AT_CELL.ESTABLISHMENT_SK=AT_ESTABLISHMENT.ESTABLISHMENT_SK ) AND ( AT_CELL.UNIT_4_SK=AT_OFFENDER_BOOKING.LIVING_UNIT_SK ) AND ( AT_ESTABLISHMENT.ACTIVE_FLAG='Y' ) AND ( AT_DIM_ETHNICITY_CODES.CODE(+)=AT_OFFENDER_BOOKING.ETHNICITY_CODE ) AND ( AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK IN (SELECT CSL.OFFENDER_BOOKING_SK FROM BODIMIS.DIM_STAFF_ACCESSIBLE_CASELOAD SAC, BODIMIS.DIM_CASELOAD_SECURITY_LIST CSL WHERE SAC.CASELOAD_ID=CSL.CASELOAD_CODE AND SAC.USERNAME = UPPER((SELECT username FROM context_ /*= #Variable('BOUSER') */ )) AND CSL.ENDYEAR >= to_char(sysdate,'YYYY')-6 ) ) AND ( AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK=DT_ADMISSION.OFFENDER_BOOKING_SK(+) ) AND ( DT_ADMISSION.FROM_LOCATION_SK=DT_ALL_LOCATIONS.LOCATION_SK (+) and DT_ADMISSION.FROM_LOCATION_TYPE=DT_ALL_LOCATIONS.LOCATION_TYPE(+) ) AND ( AT_CURRENT_SECURITY_CATEGORY.CURRENT_SEC_CAT_FLAG(+)='Y' ) AND ( AT_CURRENT_SECURITY_CATEGORY.OFFENDER_BOOKING_SK(+)=AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK ) AND ( DT_MAPPA.OFFENDER_BOOKING_SK(+)=AT_OFFENDER_BOOKING.OFFENDER_BOOKING_SK ) AND ( ( AT_OFFENDER_BOOKING.BOOKING_STATUS = 'O' ) AND ( case when 'All' in (SELECT WING FROM prompt_ /*= #Prompt('Wing (All for all)','A','Cell\\Unit Description 1',multi,free,Not_Persistent,User:80) */ ) then 'All' else AT_CELL.UNIT_1_DESCRIPTION end in @Variable('Wing (All for all)') ) AND ( AT_ESTABLISHMENT.ESTABLISHMENT_CODE_NK = (SELECT ESTABLISHMENT_CODE FROM prompt_ /*= #Prompt('Establishment Code','A','Establishment\\Establishment Code',mono,free,Not_Persistent,User:70) */ ) ) ) GROUP BY AT_OFFENDER_BOOKING.OFFENDER_ID_DISPLAY, AT_OFFENDER_BOOKING.SURNAME, AT_OFFENDER_BOOKING.IN_OUT, floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12), CASE when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) < 18 then 'Juvenile' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) between 18 and 20 then '18 - 20 yr olds' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) >= 21 then '21 and over' END, CASE when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) < 21 then 'Under 21' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) between 21 and 29 then '21 years to 29 years' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) between 30 and 39 then '30 years to 39 years' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) between 40 and 49 then '40 years to 49 years' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) between 50 and 59 then '50 years to 59 years' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) between 60 and 69 then '60 years to 69 years' when ( floor((months_between(( trunc(sysdate) ), ( CASE WHEN AT_DOB.DAY_DATE < '31/12/9000' THEN AT_DOB.DAY_DATE END ))) / 12) ) >= 70 then '70 plus years' END , CASE WHEN AT_DIM_ETHNICITY_CODES.CODE='MERGE' Then 'Code Missing' WHEN AT_DIM_ETHNICITY_CODES.CODE IS NULL Then 'Code Missing' when AT_DIM_ETHNICITY_CODES.CODE='W8' then 'White: Gypsy or Irish Traveller' when AT_DIM_ETHNICITY_CODES.CODE='O1' then 'Asian/Asian British: Chinese' ELSE AT_DIM_ETHNICITY_CODES.DESCRIPTION end, Case When AT_DIM_ETHNICITY_CODES.CODE='MERGE' Then 'Not stated' When AT_DIM_ETHNICITY_CODES.CODE='NS' then 'Not stated' When AT_DIM_ETHNICITY_CODES.CODE IS NULL Then 'Not stated' When AT_DIM_ETHNICITY_CODES.CODE IN('O9','O2') Then 'Other ethnic group' When AT_DIM_ETHNICITY_CODES.CODE ='NS' then 'Not stated' When AT_DIM_ETHNICITY_CODES.CODE IN('B1','B2','B9') then 'Black or Black British' When AT_DIM_ETHNICITY_CODES.CODE IN('A1','A2','A3','A4','A9','O1') then 'Asian or Asian British' When AT_DIM_ETHNICITY_CODES.CODE IN('M1','M2','M3','M9') then 'Mixed' When AT_DIM_ETHNICITY_CODES.CODE IN('W1','W2','W3','W8','W9') then 'White' End , CASE WHEN AT_CURRENT_SECURITY_CATEGORY.CURRENT_SEC_CAT_LEVEL IS NULL THEN 'Unclassified' ELSE AT_CURRENT_SECURITY_CATEGORY.CURRENT_SEC_CAT_LEVEL END, Case when AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE In ('14FTR_ORA','14FTRHDC_ORA','CUR_ORA','FTR/08','FTR_HDC','FTR_HDC_ORA','FTR_ORA','FTR_SCH15','FTRSCH15_ORA','HDR_ORA','LR','LR_ALP','LR_ALP_LASPO','LR_DLP','LR_DPP','LR_EPP','LR_ES','LR_HDC','LR_IPP','LR_LASPO_AR','LR_LASPO_DR','LR_LIFE','LR_MLP','LR_ORA','LR_SEC236A','LR_SEC91_ORA','LR_YOI','LR_YOI_ORA') then 'Recall' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND = '0' then 'Dead' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND = '1' then 'Indeterminate Sentence' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('2','3') then 'Sentenced' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('4','5','6','7') then 'Convicted Unsentenced' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('9','10') or AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE = 'CIV_RMD' then 'Civil Prisoner' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('8','11') then 'Immigration Detainee' when AT_OFFENDER_BOOKING.LEGAL_STATUS_BAND in ('12','13','14') then 'Remand' when AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE = 'UNKNOWN' then 'Unknown' Else 'Other' End , Case when AT_OFFENDER_BOOKING.MAIN_LEGAL_STATUS_CODE in ('IPP','LR_IPP') then 'Y' else 'N' End, DT_MAPPA.MAPPA_ALERT, case when AT_OFFENDER_BOOKING.NATIONALITY_CODE='BRIT' then 'British' when AT_OFFENDER_BOOKING.NATIONALITY_CODE IN( 'UNKNOWN','REF','STATE') then 'Not stated' when AT_OFFENDER_BOOKING.NATIONALITY_CODE is null then 'Not stated' else 'Foreign nationals' END, Case when AT_OFFENDER_BOOKING.RELIGION_CODE is null then 'Not stated' when AT_OFFENDER_BOOKING.RELIGION_CODE='BAPT' then 'Baptist' when AT_OFFENDER_BOOKING.RELIGION_CODE IN ('COFE','COFI') Then 'Church of England' when AT_OFFENDER_BOOKING.RELIGION_CODE ='RC' Then 'Roman Catholic' when AT_OFFENDER_BOOKING.RELIGION_CODE='SIKH' then 'Sikh' when AT_OFFENDER_BOOKING.RELIGION_CODE='UNKN' then 'Not stated' when AT_OFFENDER_BOOKING.RELIGION_CODE='BUDD' then 'Buddhist' when AT_OFFENDER_BOOKING.RELIGION_CODE='HIND' then 'Hindu' when AT_OFFENDER_BOOKING.RELIGION_CODE='JEW' then 'Jewish' when AT_OFFENDER_BOOKING.RELIGION_CODE IN('BLAC','SHIA','SUNI','MOS') Then 'Muslim' when AT_OFFENDER_BOOKING.RELIGION_CODE IN('AGNO','ATHE','NIL') Then 'No religion' when AT_OFFENDER_BOOKING.RELIGION_CODE IN ('BAHA','DRU','HARE','JAIN','NONP','OTH','PAG','PARS','RAST','SATN','SCIE','SHIN','TAO','ZORO') Then 'Other' Else 'Other Christian denominations' End, case when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME)<1 then 'Less than 1 month' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=1 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 3 then '1 month to 3 months' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=3 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 6 then '3 months to 6 months' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=6 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 12 then '6 months to 1 year' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=12 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 24 then '1 year to 2 years' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=24 and months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) < 48 then '2 years to 4 years' when months_between(DT_ADMISSION.LOAD_DATE,DT_ADMISSION.MOVEMENT_TIME) >=48 then '4 years or more' End, DT_ADMISSION.MOVEMENT_TIME, AT_CELL.UNIT_4_SHORT_DESCRIPTION, AT_ESTABLISHMENT.ESTABLISHMENT_DESCRIPTION, DT_ALL_LOCATIONS.LOCATION_DESC, CASE When DT_LIFEFLAG.LIFE_SENTENCE_FLAG='Y' Then 'Life' When substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) = '99' Then 'Life' When DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH ='00/00/00' then 'No sentence' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2)) <6 then 'Less than 6 Months' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)='00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,4,2))<12 then '6 Months to less than 1 Year' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)<>'00' and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<2 then '1 Year to less than 2 Years' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) not in ('00','01') and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<3 then '2 Years to less than 3 Years' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) not in ('00','01','02') and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<4 then '3 Years to less than 4 Years' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2) not in ('00','01','02','03') and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2))<10 then '4 Years to less than 10 Years' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and to_number(substr(DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH,1,2)) >=10 then '10 Years or more and Less than Life' When DT_LIFEFLAG.LIFE_SENTENCE_FLAG is null and DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH is null then 'No sentence' Else 'Not Categorised' END, Case When DT_LIFEFLAG.LIFE_SENTENCE_FLAG='Y' then 'Sentenced' when DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH='00/00/00' then 'Unsentenced' when DT_CURREFFSENLEN.EFFECTIVE_SENTENCE_LENGTH is null then 'Unsentenced' else 'Sentenced' End, DT_CURRENT_KEY_DATES.SED, trunc(sysdate), AT_OFFENDER_BOOKING.FIRST_NAME), dataset_ AS (SELECT FROM dataset_base_)",
      "parameters": [
        {
          "index": 0,
          "name": "wing",
          "filterType": "autocomplete",
          "reportFieldType": "string",
          "display": "Wing (All for all)",
          "description": "@Prompt('Wing (All for all)','A','Cell\\Unit Description 1',multi,free,Not_Persistent,User:80)",
          "mandatory": "true",
          "referenceType": "wing"
        },
        {
          "index": 1,
          "name": "establishment_code",
          "filterType": "autocomplete",
          "reportFieldType": "string",
          "display": "Establishment",
          "description": "@Prompt('Establishment Code','A','Establishment\\Establishment Code',mono,free,Not_Persistent,User:70)",
          "mandatory": "true",
          "referenceType": "establishment"
        }
      ],
      "schema": {
        "field": []
      }
    },
    {
      "id": "3375368/DP1d",
      "name": "Sentence Bands",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT DT_SENTENCE_BAND.SENTENCE_BAND FROM (SELECT 'Less than 6 Months' AS Sentence_Band FROM DUAL UNION SELECT '6 Months to less than 1 Year' AS Sentence_Band FROM DUAL UNION SELECT '1 Year to less than 2 Years' AS Sentence_Band FROM DUAL UNION SELECT '2 Years to less than 3 Years' AS Sentence_Band FROM DUAL UNION SELECT '3 Years to less than 4 Years' AS Sentence_Band FROM DUAL UNION SELECT '4 Years to less than 10 Years' AS Sentence_Band FROM DUAL UNION SELECT '10 Years or more and Less than Life' AS Sentence_Band FROM DUAL UNION SELECT 'Life' AS Sentence_Band FROM DUAL UNION SELECT 'No sentence' AS Sentence_Band FROM DUAL) DT_SENTENCE_BAND), dataset_ AS (SELECT SENTENCE_BAND FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "SENTENCE_BAND",
            "type": "string",
            "display": "IOP Sentence Band",
            "legacyId": "DP1d.DO379",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP24",
      "name": "Ethnicity",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT CASE WHEN AT_DIM_ETHNICITY_CODES.CODE = 'MERGE' THEN 'Code Missing' WHEN AT_DIM_ETHNICITY_CODES.CODE IS NULL THEN 'Code Missing' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'W8' THEN 'White: Gypsy or Irish Traveller' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'O1' THEN 'Asian/Asian British: Chinese' ELSE AT_DIM_ETHNICITY_CODES.DESCRIPTION END AS ETHNIC_DESCRIPTION, CASE WHEN AT_DIM_ETHNICITY_CODES.CODE = 'MERGE' THEN 'Not stated' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'NS' THEN 'Not stated' WHEN AT_DIM_ETHNICITY_CODES.CODE IS NULL THEN 'Not stated' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('O9', 'O2') THEN 'Other ethnic group' WHEN AT_DIM_ETHNICITY_CODES.CODE = 'NS' THEN 'Not stated' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('B1', 'B2', 'B9') THEN 'Black or Black British' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('A1', 'A2', 'A3', 'A4', 'A9', 'O1') THEN 'Asian or Asian British' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('M1', 'M2', 'M3', 'M9') THEN 'Mixed' WHEN AT_DIM_ETHNICITY_CODES.CODE IN ('W1', 'W2', 'W3', 'W8', 'W9') THEN 'White' END AS IOP_ETHNIC_GROUPING FROM BODIMIS.DIM_ETHNICITY_CODES AT_DIM_ETHNICITY_CODES), dataset_ AS (SELECT ETHNIC_DESCRIPTION, IOP_ETHNIC_GROUPING FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "ETHNIC_DESCRIPTION",
            "type": "string",
            "display": "Ethnic Description",
            "legacyId": "DP24.DO1009d",
            "legacySqlClass": "column"
          },
          {
            "index": 1,
            "name": "IOP_ETHNIC_GROUPING",
            "type": "string",
            "display": "IOP Ethnic Grouping",
            "legacyId": "DP24.DO107c0",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP26",
      "name": "Nationalities",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT DT_NATIONALITY_GROUPING.NATIONALITY_GROUPING FROM (SELECT 'British' AS Nationality_Grouping FROM DUAL UNION SELECT 'Foreign nationals' AS Nationality_Grouping FROM DUAL UNION SELECT 'Not stated' AS Nationality_Grouping FROM DUAL) DT_NATIONALITY_GROUPING), dataset_ AS (SELECT NATIONALITY_GROUPING FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "NATIONALITY_GROUPING",
            "type": "string",
            "display": "IOP Nationality Grouping",
            "legacyId": "DP26.DO107c3",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP27",
      "name": "Religions",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT DT_REL_CATEGORY.REL_CAT FROM (SELECT 'Baptist' AS REL_CAT FROM DUAL UNION SELECT 'Church of England' AS REL_CAT FROM DUAL UNION SELECT 'Roman Catholic' AS REL_CAT FROM DUAL UNION SELECT 'Other Christian denominations' AS REL_CAT FROM DUAL UNION SELECT 'Muslim' AS REL_CAT FROM DUAL UNION SELECT 'Sikh' AS REL_CAT FROM DUAL UNION SELECT 'Hindu' AS REL_CAT FROM DUAL UNION SELECT 'Buddhist' AS REL_CAT FROM DUAL UNION SELECT 'Jewish' AS REL_CAT FROM DUAL UNION SELECT 'Other' AS REL_CAT FROM DUAL UNION SELECT 'No religion' AS REL_CAT FROM DUAL UNION SELECT 'Not stated' AS REL_CAT FROM DUAL) DT_REL_CATEGORY), dataset_ AS (SELECT REL_CAT FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "REL_CAT",
            "type": "string",
            "display": "IOP Religion",
            "legacyId": "DP27.DO107c8",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP2a",
      "name": "Status",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT DT_LEGAL_STATUS.STATUS_CAT FROM (SELECT 'Sentenced' AS STATUS_CAT FROM DUAL UNION SELECT 'Recall' AS STATUS_CAT FROM DUAL UNION SELECT 'Convicted unsentenced' AS STATUS_CAT FROM DUAL UNION SELECT 'Remand' AS STATUS_CAT FROM DUAL UNION SELECT 'Civil prisoners' AS STATUS_CAT FROM DUAL UNION SELECT 'Detainee' AS STATUS_CAT FROM DUAL) DT_LEGAL_STATUS), dataset_ AS (SELECT STATUS_CAT FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "STATUS_CAT",
            "type": "string",
            "display": "IOP Legal Status Grouping",
            "legacyId": "DP2a.DO107c6",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP2c",
      "name": "Length of Stay",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT DT_LOS.LENGTH_OF_STAY FROM (SELECT 'Less than 1 month' AS LENGTH_OF_STAY FROM DUAL UNION SELECT '1 month to 3 months' AS LENGTH_OF_STAY FROM DUAL UNION SELECT '3 months to 6 months' AS LENGTH_OF_STAY FROM DUAL UNION SELECT '6 months to 1 year' AS LENGTH_OF_STAY FROM DUAL UNION SELECT '1 year to 2 years' AS LENGTH_OF_STAY FROM DUAL UNION SELECT '2 years to 4 years' AS LENGTH_OF_STAY FROM DUAL UNION SELECT '4 years or more' AS LENGTH_OF_STAY FROM DUAL) DT_LOS), dataset_ AS (SELECT LENGTH_OF_STAY FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "LENGTH_OF_STAY",
            "type": "string",
            "display": "IOP Length of Stay Grouping",
            "legacyId": "DP2c.DO107c7",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP2d",
      "name": "Age Banding",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT DT_AYP_AGE_BANDING.AGE_BANDING FROM (SELECT 'Under 21' AS AGE_BANDING FROM DUAL UNION SELECT '21 years to 29 years' AS AGE_BANDING FROM DUAL UNION SELECT '30 years to 39 years' AS AGE_GROUPING FROM DUAL UNION SELECT '40 years to 49 years' AS AGE_GROUPING FROM DUAL UNION SELECT '50 years to 59 years' AS AGE_GROUPING FROM DUAL UNION SELECT '60 years to 69 years' AS AGE_GROUPING FROM DUAL UNION SELECT '70 plus years' AS AGE_GROUPING FROM DUAL) DT_AYP_AGE_BANDING), dataset_ AS (SELECT AGE_BANDING FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "AGE_BANDING",
            "type": "string",
            "display": "IOP Age Grouping in Years",
            "legacyId": "DP2d.DO107c4",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP2f",
      "name": "Age Grouping",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT DT_INSPEC_AYP_AGE_BANDS.INSPEC_AGE_BAND FROM (SELECT '18 - 20 yr olds' AS INSPEC_AGE_BAND FROM DUAL UNION SELECT '21 and over' AS INSPEC_AGE_BAND FROM DUAL UNION SELECT 'Juvenile' AS INSPEC_AGE_BAND FROM DUAL) DT_INSPEC_AYP_AGE_BANDS), dataset_ AS (SELECT INSPEC_AGE_BAND FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "INSPEC_AGE_BAND",
            "type": "string",
            "display": "IOP Age Grouping",
            "legacyId": "DP2f.DO107ca",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP36",
      "name": "Sentence Grp",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT DT_IS_SENTENCED.SENTENCE_GROUPING FROM (SELECT 'Sentenced' AS SENTENCE_GROUPING FROM DUAL UNION SELECT 'Unsentenced' AS SENTENCE_GROUPING FROM DUAL) DT_IS_SENTENCED), dataset_ AS (SELECT SENTENCE_GROUPING FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "SENTENCE_GROUPING",
            "type": "string",
            "display": "IOP Is Sentenced?",
            "legacyId": "DP36.DO5d8",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375368/DP37",
      "name": "MiS Load",
      "description": "MIS Sentence",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT BODIMIS.ETL_LOAD_LOG.BUSINESS_DATE FROM BODIMIS.ETL_LOAD_LOG WHERE (BODIMIS.ETL_LOAD_LOG.LOAD_ID = (SELECT MAX(LOAD_ID) FROM BODIMIS.ETL_LOAD_LOG WHERE NOT LOAD_END_DATETIME IS NULL))), dataset_ AS (SELECT BUSINESS_DATE FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "BUSINESS_DATE",
            "type": "date",
            "display": "Latest Business Date Available",
            "legacyId": "DP37.DO104dd",
            "legacySqlClass": "column"
          }
        ]
      }
    }
  ],
  "policy": [
    {
      "id": "access",
      "type": "access",
      "rule": [
        {
          "effect": "permit",
          "condition": [
            {
              "match": [
                "${role}",
                "ROLE_PRISONS_REPORTING_USER"
              ]
            }
          ]
        }
      ]
    }
  ],
  "report": [
    {
      "id": "160092.RS",
      "name": "Summary",
      "classification": "OFFICIAL",
      "version": "1.0.0",
      "render": "HTML",
      "dataset": "3375368/DP4",
      "feature": [
        {
          "type": "print"
        }
      ],
      "specification": {
        "template": "list-tab",
        "field": [
          {
            "name": "$ref:DP4_DO10655",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP4_DO100E1",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          }
        ]
      }
    },
    {
      "id": "162687.RS",
      "name": "Core Detail",
      "classification": "OFFICIAL",
      "version": "1.0.0",
      "render": "HTML",
      "dataset": "3375368/DP4",
      "feature": [
        {
          "type": "print"
        }
      ],
      "specification": {
        "template": "list-tab",
        "field": [
          {
            "name": "$ref:DP4_DO104C2",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP4_DO10076",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP4_DO1007B",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP4_DO10080",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP4_DO107BE",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP4_DO10655",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "type": "enhanced",
      "error": "resolveEmbeddedVariables did not resolve all variables",
      "entityId": "kleHq84ACgZZV04A3f8AFE.rcVQ",
      "entityType": "dpd"
    },
    {
      "type": "enhanced",
      "error": "dataset::fixSqlFormatting sql is not valid [Required keyword: 'expressions' missing for <class 'sqlglot.expressions.Aliases'>. Line 1, Col: 19956.\n  multi,free,Not_Persistent,User:80) */ ) then 'All' else AT_CELL.UNIT_1_DESCRIPTION end in @Variable(\u001b[4m'Wing (All for all)'\u001b[0m) ) AND ( AT_ESTABLISHMENT.ESTABLISHMENT_CODE_NK = (SELECT ESTABLISHMENT_CODE FROM prompt_ /*= #Prom]",
      "entityId": "kleHq84ACgZZV04A3f8AFE.rcVQ",
      "entityType": "dpd"
    },
    {
      "type": "schema",
      "error": "Dataset does not have any schema fields",
      "entityId": "3375368/DP4",
      "entityType": "dataset"
    },
    {
      "type": "schema",
      "error": "Report field DP4_DO10655 does not have corresponding dataset schema field",
      "entityId": "160092.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP4_DO100E1 does not have corresponding dataset schema field",
      "entityId": "160092.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP4_DO104C2 does not have corresponding dataset schema field",
      "entityId": "162687.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP4_DO10076 does not have corresponding dataset schema field",
      "entityId": "162687.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP4_DO1007B does not have corresponding dataset schema field",
      "entityId": "162687.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP4_DO10080 does not have corresponding dataset schema field",
      "entityId": "162687.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP4_DO107BE does not have corresponding dataset schema field",
      "entityId": "162687.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP4_DO10655 does not have corresponding dataset schema field",
      "entityId": "162687.RS",
      "entityType": "variant"
    },
    {
      "type": "athenQuery",
      "error": "unable to generate test sql",
      "entityId": "3375368/DP4",
      "entityType": "dataset"
    }
  ]
}