{
  "id": "klYTh94AC_OmVygBGEQAISgV_bQ",
  "name": "MIS Incidents by Question and Response",
  "metadata": {
    "version": "1.0.0",
    "tags": [
      "INC0002 - v00.01.01 drop9.1_9.2"
    ]
  },
  "description": "Provides a count of incidents per establishment of pre-determined incident questions and responses between two dates. It is used by NOU (National Operations Unit) to provide statistics on reportable incidents within HMPS, in response to a Parliamentary Question or an enquiry from senior HMPS managers.<br/>INC0002 - v00.01.01 Last Modified: 08/10/15",
  "datasource": [
    {
      "id": "bodmis",
      "name": "BODMIS",
      "database": "DIGITAL_PRISON_REPORTING",
      "catalog": "bodmis"
    }
  ],
  "dataset": [
    {
      "id": "3375377/DP2",
      "name": "All Incidents",
      "description": "MIS Incidents",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT AT_INCIDENT_ESTABLISHMENT.AREA_DESCRIPTION, AT_INCIDENT_ESTABLISHMENT.ESTABLISHMENT_DESCRIPTION, COUNT(DISTINCT (AT_INCIDENT.INCIDENT_CASE_ID)) AS NUMBER_OF_INCIDENTS, DT_SELECTED_INCIDENTS.NO_OF_SEL_ANSW_PER_INCIDENT FROM BODIMIS.FACT_INCIDENT AT_INCIDENT, BODIMIS.DIM_ESTABLISHMENT AT_INCIDENT_ESTABLISHMENT, BODIMIS.DIM_INCIDENT_STATUS AT_INCIDENT_STATUS, (SELECT DT_ANSWERS_PER_INCIDENT.INCIDENT_CASE_ID, DT_ANSWERS_PER_INCIDENT.NO_OF_SEL_ANSW_PER_INCIDENT, DT_NO_OF_ANSWERS_SELECTED.NO_OF_ANSWERS_SELECTED FROM (SELECT AT_INCIDENT_QUESTIONNAIRE.INCIDENT_CASE_ID, COUNT(DISTINCT DT_INC_TYPE_QUEST_ANSW_LOV.INCIDENT_ANSWER_SK) AS NO_OF_SEL_ANSW_PER_INCIDENT FROM (SELECT DISTINCT AT_INCIDENT_TYPE.INCIDENT_TYPE_DESC, AT_INCIDENT_QUESTION.QUE_SEQ, AT_INCIDENT_QUESTION.QUESTION_DESCRIPTION, AT_INCIDENT_ANSWER.INCIDENT_QUESTION_SK, AT_INCIDENT_ANSWER.ANSWER_DESCRIPTION, AT_INCIDENT_ANSWER.ANS_SEQ, AT_INCIDENT_ANSWER.INCIDENT_ANSWER_SK FROM BODIMIS.DIM_INCIDENT_TYPE AT_INCIDENT_TYPE, BODIMIS.DIM_INCIDENT_QUESTION AT_INCIDENT_QUESTION, BODIMIS.DIM_INCIDENT_ANSWER AT_INCIDENT_ANSWER, BODIMIS.FACT_INCIDENT AT_INCIDENT, BODIMIS.FACT_INCIDENT_QUESTIONNAIRE AT_INCIDENT_QUESTIONNAIRE WHERE (AT_INCIDENT_TYPE.INCIDENT_TYPE_SK = AT_INCIDENT.INCIDENT_TYPE_SK) AND (AT_INCIDENT_QUESTIONNAIRE.INCIDENT_CASE_ID = AT_INCIDENT.INCIDENT_CASE_ID) AND (AT_INCIDENT_ANSWER.INCIDENT_QUESTION_SK = AT_INCIDENT_QUESTION.INCIDENT_QUESTION_SK) AND (AT_INCIDENT_ANSWER.INCIDENT_ANSWER_SK = AT_INCIDENT_QUESTIONNAIRE.INCIDENT_ANSWER_SK) /* ************************************************* */ /* ** End of derived table DT_INC_TYPE_QUEST_ANSW_LOV * */ /* ************************************************* */) DT_INC_TYPE_QUEST_ANSW_LOV, BODIMIS.FACT_INCIDENT_QUESTIONNAIRE AT_INCIDENT_QUESTIONNAIRE WHERE (DT_INC_TYPE_QUEST_ANSW_LOV.INCIDENT_ANSWER_SK = AT_INCIDENT_QUESTIONNAIRE.INCIDENT_ANSWER_SK) AND (DT_INC_TYPE_QUEST_ANSW_LOV.INCIDENT_ANSWER_SK IN (SELECT QUESTION_AND_ANSWERS FROM prompt_ /* = #prompt('Please select the questions and answers!','N','Incident Type Questions Answers LOV\\Answer Description + ID LOV',multi,free,Not_Persistent,primary_key) */)) GROUP BY AT_INCIDENT_QUESTIONNAIRE.INCIDENT_CASE_ID /* ********************************************** */ /* ** End of derived table DT_ANSWERS_PER_INCIDENT * */ /* ********************************************** */) DT_ANSWERS_PER_INCIDENT, (SELECT COUNT(DISTINCT DT_INC_TYPE_QUEST_ANSW_LOV.INCIDENT_ANSWER_SK) AS NO_OF_ANSWERS_SELECTED FROM (SELECT DISTINCT AT_INCIDENT_TYPE.INCIDENT_TYPE_DESC, AT_INCIDENT_QUESTION.QUE_SEQ, AT_INCIDENT_QUESTION.QUESTION_DESCRIPTION, AT_INCIDENT_ANSWER.INCIDENT_QUESTION_SK, AT_INCIDENT_ANSWER.ANSWER_DESCRIPTION, AT_INCIDENT_ANSWER.ANS_SEQ, AT_INCIDENT_ANSWER.INCIDENT_ANSWER_SK FROM BODIMIS.DIM_INCIDENT_TYPE AT_INCIDENT_TYPE, BODIMIS.DIM_INCIDENT_QUESTION AT_INCIDENT_QUESTION, BODIMIS.DIM_INCIDENT_ANSWER AT_INCIDENT_ANSWER, BODIMIS.FACT_INCIDENT AT_INCIDENT, BODIMIS.FACT_INCIDENT_QUESTIONNAIRE AT_INCIDENT_QUESTIONNAIRE WHERE (AT_INCIDENT_TYPE.INCIDENT_TYPE_SK = AT_INCIDENT.INCIDENT_TYPE_SK) AND (AT_INCIDENT_QUESTIONNAIRE.INCIDENT_CASE_ID = AT_INCIDENT.INCIDENT_CASE_ID) AND (AT_INCIDENT_ANSWER.INCIDENT_QUESTION_SK = AT_INCIDENT_QUESTION.INCIDENT_QUESTION_SK) AND (AT_INCIDENT_ANSWER.INCIDENT_ANSWER_SK = AT_INCIDENT_QUESTIONNAIRE.INCIDENT_ANSWER_SK) /* ************************************************* */ /* ** End of derived table DT_INC_TYPE_QUEST_ANSW_LOV * */ /* ************************************************* */) DT_INC_TYPE_QUEST_ANSW_LOV WHERE (DT_INC_TYPE_QUEST_ANSW_LOV.INCIDENT_ANSWER_SK IN (SELECT QUESTION_AND_ANSWERS FROM prompt_ /* = #prompt('Please select the questions and answers!','N','Incident Type Questions Answers LOV\\Answer Description + ID LOV',multi,free,Not_Persistent,primary_key) */)) /* ************************************************* */ /* ** End of derived table DT_NO_OF_ANSWERS_SELECTED * */ /* ************************************************* */) DT_NO_OF_ANSWERS_SELECTED WHERE (DT_NO_OF_ANSWERS_SELECTED.NO_OF_ANSWERS_SELECTED = DT_ANSWERS_PER_INCIDENT.NO_OF_SEL_ANSW_PER_INCIDENT) /* ********************************************** */ /* ********************************************** */ /* ** End of derived table DT_SELECTED_INCIDENTS * */ /* ********************************************** */ /* ********************************************** */) DT_SELECTED_INCIDENTS, BODIMIS.DIM_DATE AT_INCIDENT_DATE WHERE (AT_INCIDENT.INCIDENT_STATUS_SK = AT_INCIDENT_STATUS.INCIDENT_STATUS_SK) AND (AT_INCIDENT_ESTABLISHMENT.ESTABLISHMENT_SK = AT_INCIDENT.ESTABLISHMENT_SK) AND (AT_INCIDENT_DATE.DATE_SK = AT_INCIDENT.INCIDENT_DATE_SK) AND (DT_SELECTED_INCIDENTS.INCIDENT_CASE_ID = AT_INCIDENT.INCIDENT_CASE_ID) AND (AT_INCIDENT_STATUS.INCIDENT_STATUS_ID_NK <> 'DUP') AND (AT_INCIDENT_STATUS.INCIDENT_STATUS_ID_NK <> 'DUP') AND (((AT_INCIDENT_DATE.DAY_DATE) BETWEEN (SELECT EARLIEST_DATE FROM prompt_ /* = #Prompt('Earliest Incident Date','D',,mono,free,Not_Persistent,User:270) */) AND (SELECT UNKNOWN_PARAMETER FROM prompt_ /* = #Prompt('Latest Incident Date','D',,mono,free,Not_Persistent,User:271) */)) AND (AT_INCIDENT_ESTABLISHMENT.ESTABLISHMENT_CODE_NK IN (SELECT ESTABLISHMENT_CODE FROM prompt_ /* = #Prompt('Incident Establishment Code (All for all)','A','Incidents\\Incident Establishment Code',multi,free,Not_Persistent,User:252) */) OR 'All' IN (SELECT ESTABLISHMENT_CODE FROM prompt_ /* = #Prompt('Incident Establishment Code (All for all)','A','Incidents\\Incident Establishment Code',multi,free,Not_Persistent,User:252) */)) AND (AT_INCIDENT_ESTABLISHMENT.AREA_DESCRIPTION IN (SELECT ESTABLISHMENT_CODE FROM prompt_ /* = #Prompt('Establishment Area (All for all)','A','Incidents\\Incident Establishment Area',multi,free,Not_Persistent,User:251) */) OR 'All' IN (SELECT ESTABLISHMENT_CODE FROM prompt_ /* = #Prompt('Establishment Area (All for all)','A','Incidents\\Incident Establishment Area',multi,free,Not_Persistent,User:251) */))) GROUP BY AT_INCIDENT_ESTABLISHMENT.AREA_DESCRIPTION, AT_INCIDENT_ESTABLISHMENT.ESTABLISHMENT_DESCRIPTION, DT_SELECTED_INCIDENTS.NO_OF_SEL_ANSW_PER_INCIDENT), dataset_ AS (SELECT AREA_DESCRIPTION, ESTABLISHMENT_DESCRIPTION, NUMBER_OF_INCIDENTS, NO_OF_SEL_ANSW_PER_INCIDENT FROM dataset_base_)",
      "parameters": [
        {
          "index": 0,
          "name": "question_and_answers",
          "filterType": "text",
          "reportFieldType": "string",
          "display": "Please select the questions and answers!",
          "description": "@prompt('Please select the questions and answers!','N','Incident Type Questions Answers LOV\\Answer Description + ID LOV',multi,free,Not_Persistent,primary_key)",
          "mandatory": "true"
        },
        {
          "index": 1,
          "name": "establishment_code",
          "filterType": "autocomplete",
          "reportFieldType": "string",
          "display": "Establishment",
          "description": "@Prompt('Incident Establishment Code (All for all)','A','Incidents\\Incident Establishment Code',multi,free,Not_Persistent,User:252)",
          "mandatory": "true",
          "referenceType": "establishment"
        },
        {
          "index": 2,
          "name": "earliest_date",
          "filterType": "date",
          "reportFieldType": "date",
          "display": "Earliest Incident Date",
          "description": "@Prompt('Earliest Incident Date','D',,mono,free,Not_Persistent,User:270)",
          "mandatory": "true"
        },
        {
          "index": 3,
          "name": "unknown_parameter",
          "filterType": "text",
          "reportFieldType": "string",
          "display": "Latest Incident Date",
          "description": "@Prompt('Latest Incident Date','D',,mono,free,Not_Persistent,User:271)",
          "mandatory": "true"
        }
      ],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "AREA_DESCRIPTION",
            "type": "string",
            "display": "Incident Establishment Area",
            "legacyId": "DP2.DOc7",
            "legacySqlClass": "column"
          },
          {
            "index": 1,
            "name": "ESTABLISHMENT_DESCRIPTION",
            "type": "string",
            "display": "Incident Establishment Name",
            "legacyId": "DP2.DO20",
            "legacySqlClass": "column"
          },
          {
            "index": 2,
            "name": "NUMBER_OF_INCIDENTS",
            "type": "double",
            "display": "Number of Incidents",
            "legacyId": "DP2.DOc9",
            "legacySqlClass": "column"
          },
          {
            "index": 3,
            "name": "NO_OF_SEL_ANSW_PER_INCIDENT",
            "type": "double",
            "display": "No of selected Answers per Incident",
            "legacyId": "DP2.DO71d",
            "legacySqlClass": "column"
          }
        ]
      }
    },
    {
      "id": "3375377/DP4",
      "name": "Selected Questions and Answers",
      "description": "MIS Incidents",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DT_SELECTED_ANSWERS.INCIDENT_TYPE_DESC, DT_SELECTED_ANSWERS.QUE_SEQ, DT_SELECTED_ANSWERS.QUESTION_DESCRIPTION, DT_SELECTED_ANSWERS.ANSWER_DESCRIPTION FROM ( /********************************************/ /*** Start of derived table DT_SELECTED_ANSWERS **/ /********************************************/ /************************************************************/   /************************************************************/ SELECT DISTINCT * FROM ( /***************************************************/ /** Start of derived table DT_INC_TYPE_QUEST_ANSW_LOV *****/ /***************************************************/ /***************************************************/ /* This derived table is used to create the hierarchy Incident Type/Incident Question/Incident Answer. */      /* 2: To create the following derived tables based on it:  /***************************************************/ SELECT DISTINCT AT_INCIDENT_TYPE.INCIDENT_TYPE_DESC, AT_INCIDENT_QUESTION.QUE_SEQ, AT_INCIDENT_QUESTION.QUESTION_DESCRIPTION, AT_INCIDENT_ANSWER.INCIDENT_QUESTION_SK, AT_INCIDENT_ANSWER.ANSWER_DESCRIPTION, AT_INCIDENT_ANSWER.ANS_SEQ, AT_INCIDENT_ANSWER.INCIDENT_ANSWER_SK FROM BODIMIS.DIM_INCIDENT_TYPE AT_INCIDENT_TYPE, BODIMIS.DIM_INCIDENT_QUESTION AT_INCIDENT_QUESTION, BODIMIS.DIM_INCIDENT_ANSWER AT_INCIDENT_ANSWER -- BODIMIS.FACT_INCIDENT AT_INCIDENT, -- BODIMIS.FACT_INCIDENT_QUESTIONNAIRE AT_INCIDENT_QUESTIONNAIRE WHERE -- ( AT_INCIDENT_TYPE.INCIDENT_TYPE_SK=AT_INCIDENT.INCIDENT_TYPE_SK ) -- AND ( AT_INCIDENT_QUESTIONNAIRE.INCIDENT_CASE_ID=AT_INCIDENT.INCIDENT_CASE_ID ) --AND ( AT_INCIDENT_ANSWER.INCIDENT_QUESTION_SK=AT_INCIDENT_QUESTION.INCIDENT_QUESTION_SK ) -- AND ( AT_INCIDENT_ANSWER.INCIDENT_ANSWER_SK=AT_INCIDENT_QUESTIONNAIRE.INCIDENT_ANSWER_SK ) --amendment for defect 11103 (fact tables removed from this statement and the 3 joins below added) at_incident_type.questionnaire_id= AT_INCIDENT_QUESTION.questionnaire_id and at_incident_question.incident_question_sk=at_incident_answer.incident_question_sk and at_incident_question.questionnaire_que_id=at_incident_answer.questionnaire_que_id /***************************************************/ /*** End of derived table DT_INC_TYPE_QUEST_ANSW_LOV **/ /***************************************************/ ) DT_INC_TYPE_QUEST_ANSW_LOV WHERE ( DT_INC_TYPE_QUEST_ANSW_LOV.INCIDENT_ANSWER_SK IN (SELECT QUESTION_AND_ANSWERS FROM prompt_ /*= #prompt('Please select the questions and answers!','N','Incident Type Questions Answers LOV\\Answer Description + ID LOV',multi,free,Not_Persistent,primary_key) */ ) ) /********************************************/ /*** End of derived table DT_SELECTED_ANSWERS **/ /********************************************/ ) DT_SELECTED_ANSWERS), dataset_ AS (SELECT FROM dataset_base_)",
      "parameters": [
        {
          "index": 0,
          "name": "question_and_answers",
          "filterType": "text",
          "reportFieldType": "string",
          "display": "Please select the questions and answers!",
          "description": "@prompt('Please select the questions and answers!','N','Incident Type Questions Answers LOV\\Answer Description + ID LOV',multi,free,Not_Persistent,primary_key)",
          "mandatory": "true"
        }
      ],
      "schema": {
        "field": []
      }
    },
    {
      "id": "3375377/DP3",
      "name": "MIS Load End",
      "description": "MIS Incidents",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT BODIMIS.ETL_LOAD_LOG.BUSINESS_DATE FROM BODIMIS.ETL_LOAD_LOG WHERE (BODIMIS.ETL_LOAD_LOG.LOAD_ID = (SELECT MAX(LOAD_ID) FROM BODIMIS.ETL_LOAD_LOG WHERE NOT LOAD_END_DATETIME IS NULL))), dataset_ AS (SELECT BUSINESS_DATE FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "BUSINESS_DATE",
            "type": "date",
            "display": "Latest Business Date Available",
            "legacyId": "DP3.DO104dd",
            "legacySqlClass": "column"
          }
        ]
      }
    }
  ],
  "policy": [
    {
      "id": "access",
      "type": "access",
      "rule": [
        {
          "effect": "permit",
          "condition": [
            {
              "match": [
                "${role}",
                "ROLE_PRISONS_REPORTING_USER"
              ]
            }
          ]
        }
      ]
    }
  ],
  "report": [
    {
      "id": "41264.RS",
      "name": "Incidents by Question and Response",
      "classification": "OFFICIAL",
      "version": "1.0.0",
      "render": "HTML",
      "dataset": "3375377/DP2",
      "feature": [
        {
          "type": "print"
        }
      ],
      "specification": {
        "template": "list-section",
        "field": [
          {
            "name": "$ref:DP4_DO713",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP4_DO714",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP4_DO715",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          },
          {
            "name": "$ref:DP4_DO717",
            "display": "",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": ""
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "type": "enhanced",
      "error": "dataset::fixSqlFormatting sql is not valid [Expecting ). Line 1, Col: 1329.\n  E AT_INCIDENT_TYPE, BODIMIS.DIM_INCIDENT_QUESTION AT_INCIDENT_QUESTION, BODIMIS.DIM_INCIDENT_ANSWER \u001b[4mAT_INCIDENT_ANSWER\u001b[0m -- BODIMIS.FACT_INCIDENT AT_INCIDENT, -- BODIMIS.FACT_INCIDENT_QUESTIONNAIRE AT_INCIDENT_QUESTIONNA]",
      "entityId": "klYTh94AC_OmVygBGEQAISgV_bQ",
      "entityType": "dpd"
    },
    {
      "type": "schema",
      "error": "Dataset does not have any schema fields (comments -- in query)",
      "entityId": "3375377/DP4",
      "entityType": "dataset"
    },
    {
      "type": "schema",
      "error": "Report field DP4_DO713 does not have corresponding dataset schema field",
      "entityId": "41264.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP4_DO714 does not have corresponding dataset schema field",
      "entityId": "41264.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP4_DO715 does not have corresponding dataset schema field",
      "entityId": "41264.RS",
      "entityType": "variant"
    },
    {
      "type": "schema",
      "error": "Report field DP4_DO717 does not have corresponding dataset schema field",
      "entityId": "41264.RS",
      "entityType": "variant"
    },
    {
      "type": "athenQuery",
      "error": "Error: Error: Query failed: GENERIC_USER_ERROR: Failed To Get Query Passthrough Schema",
      "entityId": "3375377/DP2",
      "entityType": "dataset"
    },
    {
      "type": "athenQuery",
      "error": "unable to generate test sql",
      "entityId": "3375377/DP4",
      "entityType": "dataset"
    }
  ]
}