{
  "id": "okR_yFUADRWbPkAAOBSD8K7B1gY",
  "name": "MIS Incidents by Area and Establishment",
  "metadata": {
    "version": "1.0.0",
    "tags": [
      "INC0001 v00.00.01 drop9.1_9.2"
    ]
  },
  "description": "Provides a count of all reportable incidents within an Establishment between two specified dates.<br/>INC0001 v00.00.01 Last Modified: 30/10/08",
  "datasource": [
    {
      "id": "bodmis",
      "name": "BODMIS",
      "database": "DIGITAL_PRISON_REPORTING",
      "catalog": "bodmis"
    }
  ],
  "dataset": [
    {
      "id": "3375377/DP2",
      "name": "Data Parameterised Incidents",
      "description": "MIS Incidents",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT AT_INCIDENT_ESTABLISHMENT.AREA_DESCRIPTION, AT_INCIDENT_ESTABLISHMENT.ESTABLISHMENT_DESCRIPTION, INITCAP(AT_INCIDENT_TYPE.INCIDENT_TYPE_DESC) AS INCIDENT_TYPE, COUNT(DISTINCT (AT_INCIDENT.INCIDENT_CASE_ID)) AS NUMBER_OF_INCIDENTS FROM BODIMIS.FACT_INCIDENT AT_INCIDENT, BODIMIS.DIM_ESTABLISHMENT AT_INCIDENT_ESTABLISHMENT, BODIMIS.DIM_DATE AT_INCIDENT_DATE, BODIMIS.DIM_INCIDENT_TYPE AT_INCIDENT_TYPE WHERE (AT_INCIDENT_ESTABLISHMENT.ESTABLISHMENT_SK = AT_INCIDENT.ESTABLISHMENT_SK) AND (AT_INCIDENT_DATE.DATE_SK = AT_INCIDENT.INCIDENT_DATE_SK) AND (AT_INCIDENT_TYPE.INCIDENT_TYPE_SK = AT_INCIDENT.INCIDENT_TYPE_SK) AND (((TO_DATE(TO_CHAR(AT_INCIDENT_DATE.DAY_DATE, 'DD/MM/YYYY'), 'DD/MM/YYYY')) BETWEEN (SELECT EARLIEST_DATE FROM prompt_ /* = #Prompt('Earliest Incident Date','D',,mono,free,Not_Persistent,User:270) */) AND (SELECT UNKNOWN_PARAMETER FROM prompt_ /* = #Prompt('Latest Incident Date','D',,mono,free,Not_Persistent,User:271) */)) AND NOT AT_INCIDENT_ESTABLISHMENT.AREA_DESCRIPTION IN ('Unknown', 'Not Available') AND NOT AT_INCIDENT_ESTABLISHMENT.AREA_DESCRIPTION IS NULL) GROUP BY AT_INCIDENT_ESTABLISHMENT.AREA_DESCRIPTION, AT_INCIDENT_ESTABLISHMENT.ESTABLISHMENT_DESCRIPTION, INITCAP(AT_INCIDENT_TYPE.INCIDENT_TYPE_DESC)), dataset_ AS (SELECT AREA_DESCRIPTION, ESTABLISHMENT_DESCRIPTION, INCIDENT_TYPE, NUMBER_OF_INCIDENTS, CASE WHEN ESTABLISHMENT_DESCRIPTION = 'Haslar Immigration Removal Centre' THEN UPPER('Haslar Immigration Removal Ctr') ELSE CASE WHEN ESTABLISHMENT_DESCRIPTION = 'Dover Immigration Removal Centre' THEN UPPER('Dover Immigration Removal Ctr') ELSE UPPER(ESTABLISHMENT_DESCRIPTION) END END AS V_ESTABLISHMENT_NAME FROM dataset_base_)",
      "parameters": [
        {
          "index": 0,
          "name": "earliest_date",
          "filterType": "date",
          "reportFieldType": "date",
          "display": "Earliest Incident Date",
          "description": "@Prompt('Earliest Incident Date','D',,mono,free,Not_Persistent,User:270)",
          "mandatory": "true"
        },
        {
          "index": 1,
          "name": "unknown_parameter",
          "filterType": "text",
          "reportFieldType": "string",
          "display": "Latest Incident Date",
          "description": "@Prompt('Latest Incident Date','D',,mono,free,Not_Persistent,User:271)",
          "mandatory": "true"
        }
      ],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "AREA_DESCRIPTION",
            "type": "string",
            "display": "Incident Establishment Area",
            "legacyId": "DP2.DOc7",
            "legacySqlClass": "column"
          },
          {
            "index": 1,
            "name": "ESTABLISHMENT_DESCRIPTION",
            "type": "string",
            "display": "Incident Establishment Name",
            "legacyId": "DP2.DO20",
            "legacySqlClass": "column"
          },
          {
            "index": 2,
            "name": "INCIDENT_TYPE",
            "type": "string",
            "display": "Incident Type",
            "legacyId": "DP2.DO9",
            "legacySqlClass": "column"
          },
          {
            "index": 3,
            "name": "NUMBER_OF_INCIDENTS",
            "type": "double",
            "display": "Number of Incidents",
            "legacyId": "DP2.DOc9",
            "legacySqlClass": "column"
          },
          {
            "index": 4,
            "name": "V_ESTABLISHMENT_NAME",
            "type": "string",
            "display": "V_ESTABLISHMENT_NAME",
            "legacyId": "???",
            "legacySqlClass": "alias"
          }
        ]
      }
    },
    {
      "id": "3375377/DP3",
      "name": "All Incidents for Crosstab",
      "description": "MIS Incidents",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT DISTINCT DT_ALL_INCIDENTS.AREA_DESCRIPTION, DT_ALL_INCIDENTS.ESTABLISHMENT_DESCRIPTION, InitCap(DT_ALL_INCIDENTS.INCIDENT_TYPE_DESC) FROM ( -- THIS TABLE RETURNS A CARTESIAN PRODUCT THAT SHOWS ALL INCIDENTS MAPPED TO ALL ESTABLISHMENTS. -- ITS PURPOSE IS TO FACILITATE A CROSS TAB FORMAT IN INC0001 (I.E. DISPLAY A COUNT OF ZERO AGAINST AN INCIDENT THAT HAS NO OCCOURED IN A PARTICULAR ESTABLISHMENT SELECT DISTINCT a.INCIDENT_TYPE_CODE_NK, a.INCIDENT_TYPE_DESC, b.ESTABLISHMENT_CODE_NK, b.ESTABLISHMENT_DESCRIPTION, b.AREA_DESCRIPTION FROM BODIMIS.DIM_INCIDENT_TYPE a, BODIMIS.DIM_ESTABLISHMENT b WHERE b.ESTABLISHMENT_SK > 0 AND b.AREA_DESCRIPTION != ('Unknown') AND b.ACTIVE_FLAG = 'Y' AND a.INCIDENT_TYPE_SK > 0 ) DT_ALL_INCIDENTS WHERE ( DT_ALL_INCIDENTS.AREA_DESCRIPTION Not In ( 'Unknown','Not Available' ) AND DT_ALL_INCIDENTS.AREA_DESCRIPTION Is Not Null )), dataset_ AS (SELECT FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": []
      }
    },
    {
      "id": "3375377/DP4",
      "name": "MIS Load Date",
      "description": "MIS Incidents",
      "datasource": "bodmis",
      "query": "dataset_base_ AS (SELECT TRUNC(BODIMIS.ETL_LOAD_LOG.LOAD_END_DATETIME) AS LOAD_END_DATE FROM BODIMIS.ETL_LOAD_LOG WHERE (BODIMIS.ETL_LOAD_LOG.LOAD_ID = (SELECT MAX(LOAD_ID) FROM BODIMIS.ETL_LOAD_LOG WHERE NOT LOAD_END_DATETIME IS NULL))), dataset_ AS (SELECT LOAD_END_DATE FROM dataset_base_)",
      "parameters": [],
      "schema": {
        "field": [
          {
            "index": 0,
            "name": "LOAD_END_DATE",
            "type": "date",
            "display": "Load End Date",
            "legacyId": "DP4.DO104dd",
            "legacySqlClass": "column"
          }
        ]
      }
    }
  ],
  "policy": [
    {
      "id": "access",
      "type": "access",
      "rule": [
        {
          "effect": "permit",
          "condition": [
            {
              "match": [
                "${role}",
                "ROLE_PRISONS_REPORTING_USER"
              ]
            }
          ]
        }
      ]
    }
  ],
  "report": [
    {
      "id": "139706.RS",
      "name": "Incidents by Area and Establishment",
      "classification": "OFFICIAL",
      "version": "1.0.0",
      "render": "HTML",
      "dataset": "3375377/DP2",
      "feature": [
        {
          "type": "print"
        }
      ],
      "specification": {
        "template": "list-section",
        "field": [
          {
            "name": "$ref:NUMBER_OF_INCIDENTS",
            "display": "Number of Incidents",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacyId": "DP2.DOc9"
          },
          {
            "name": "$ref:V_ESTABLISHMENT_NAME",
            "display": "Total:",
            "formula": "",
            "visible": "true",
            "sortable": false,
            "defaultsort": false,
            "legacySql": "=If([Incident Establishment Name]=\"Haslar Immigration Removal Centre\";Upper(\"Haslar Immigration Removal Ctr\");If([Incident Establishment Name]=\"Dover Immigration Removal Centre\";Upper(\"Dover Immigration Removal Ctr\");Upper([Incident Establishment Name])))"
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "type": "enhanced",
      "error": "dataset::fixSqlFormatting sql is not valid [Expected table name but got None. Line 1, Col: 146.\n  TION, DT_ALL_INCIDENTS.ESTABLISHMENT_DESCRIPTION, InitCap(DT_ALL_INCIDENTS.INCIDENT_TYPE_DESC) FROM \u001b[4m(\u001b[0m -- THIS TABLE RETURNS A CARTESIAN PRODUCT THAT SHOWS ALL INCIDENTS MAPPED TO ALL ESTABLISHMENTS. --]",
      "entityId": "okR_yFUADRWbPkAAOBSD8K7B1gY",
      "entityType": "dpd"
    },
    {
      "type": "schema",
      "error": "Dataset does not have any schema fields (comments -- in query)",
      "entityId": "3375377/DP3",
      "entityType": "dataset"
    },
    {
      "type": "athenQuery",
      "error": "Error: Error: Query failed: GENERIC_USER_ERROR: Failed To Get Query Passthrough Schema",
      "entityId": "3375377/DP2",
      "entityType": "dataset"
    },
    {
      "type": "athenQuery",
      "error": "unable to generate test sql",
      "entityId": "3375377/DP3",
      "entityType": "dataset"
    }
  ]
}